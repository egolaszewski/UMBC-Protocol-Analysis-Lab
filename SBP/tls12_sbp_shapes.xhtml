<?xml version="1.0"?>
<!-- CPSA 4.4.2 -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
 <title>Session Binding Protocol with TLS 1.2 (uses the modified server as implemented and tested in the paper and the cookie authentication model (ca.scm) which showed the cookie stealing attack).</title>
 <meta http-equiv="content-type" content="application/xhtml+xml; charset=UTF-8" />
 <style>
  svg.diagram { border-width: 1px; border-style: solid }
 </style>
</head>
<body>

<pre>(comment &quot;CPSA 4.4.2&quot;)
(comment &quot;Extracted shapes&quot;)
(herald
  &quot;Session Binding Protocol with TLS 1.2 (uses the modified server as implemented and tested in the paper and the cookie authentication model (ca.scm) which showed the cookie stealing attack).&quot;
  (bound 12))
(comment &quot;CPSA 4.4.2&quot;)
(comment &quot;All input read from tls12_sbp.scm&quot;)
(comment &quot;Strand count bounded at 12&quot;)</pre>

<p id="top">Trees: <a href="#t0">0</a> <a href="#t40">40</a> <a href="#t54">54</a> <a href="#t94">94</a> <a href="#t96">96</a> <a href="#t98">98</a> <a href="#t101">101</a> <a href="#t115">115</a> <a href="#t155">155</a>.</p>

<p id="t0">Tree <a href="#top">0</a>, POV <a href="#k0">0</a>.</p>

<div>
 <svg
  class='diagram' width='129.840pt' height='79.920pt'
  xmlns='http://www.w3.org/2000/svg' version='1.1'
  viewBox='0 0 129.840 79.920' font-size='12.000'>
  <text
   x='89.880' y='26.040'
   style='font-weight: bold; text-anchor: middle; fill: blue;'
   onclick='window.open(&quot;#k26&quot;, &quot;_self&quot;)'>26</text>
  <line
   x1='39.960' y1='39.960' x2='89.880' y2='39.960'
   style='stroke-width: 0.960; stroke: gray;'/>
  <text
   x='39.960' y='26.040' style='text-anchor: middle; fill: black;'
   onclick='window.open(&quot;#k0&quot;, &quot;_self&quot;)'>0</text>
  </svg></div>

<pre>(defprotocol ca basic
  (defrole clienta
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (p password) (cookie any mesg) (cookiestor locn) (request httpreq)
      (response httpdata))
    (trace (send cr) (recv (cat sr s spk (enc (hash s spk) (privk ca))))
      (send
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (recv
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (send (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv
        (enc &quot;login-successful&quot; cookie
          (hash (hash pms cr sr) &quot;server_write&quot;))) (load cookiestor any)
      (stor cookiestor (cat &quot;client store&quot; u s cookie))
      (send (enc cookie request (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv (enc response (hash (hash pms cr sr) &quot;server_write&quot;)))))
  (defrole clientr
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (cookie mesg) (cookiestor locn) (request httpreq)
      (response httpdata))
    (trace (send cr) (recv (cat sr s spk (enc (hash s spk) (privk ca))))
      (send
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (recv
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (load cookiestor (cat &quot;client store&quot; u s cookie))
      (send (enc cookie request (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    (gen-st (cat &quot;client store&quot; u s cookie)))
  (defrole servera
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (p password) (cookie data) (ppk skey) (any mesg) (authstor locn)
      (request httpreq) (response httpdata))
    (trace (recv cr) (send (cat sr s spk (enc (hash s spk) (privk ca))))
      (recv
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (send
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (recv (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (send
        (enc &quot;login-successful&quot; (enc cookie (hash ppk (hash pms cr sr)))
          (hash (hash pms cr sr) &quot;server_write&quot;))) (load authstor any)
      (stor authstor (cat &quot;server store&quot; s u cookie))
      (recv
        (enc (enc cookie (hash ppk (hash pms cr sr))) request
          (hash (hash pms cr sr) &quot;client_write&quot;)))
      (send (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    (non-orig ppk)
    (uniq-orig cookie)
    (facts (neq u s)))
  (defrole serverr
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (cookie data) (ppk skey) (authstor locn) (request httpreq)
      (response httpdata))
    (trace (recv cr) (send (cat sr s spk (enc (hash s spk) (privk ca))))
      (recv
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (send
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (recv
        (enc (enc cookie (hash ppk (hash pms cr sr))) request
          (hash (hash pms cr sr) &quot;client_write&quot;)))
      (load authstor (cat &quot;server store&quot; s u cookie))
      (send (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    (non-orig ppk)
    (facts (neq u s))
    (gen-st (cat &quot;server store&quot; s u cookie)))
  (defgenrule neqRl_indx
    (forall ((x indx)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_strd
    (forall ((x strd)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_mesg
    (forall ((x mesg)) (implies (fact neq x x) (false))))
  (defgenrule scissorsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (leads-to z0 i0 z2 i2))
        (and (= z1 z2) (= i1 i2)))))
  (defgenrule cakeRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (leads-to z0 i0 z1 i1)
          (leads-to z0 i0 z2 i2) (prec z1 i1 z2 i2)) (false))))
  (defgenrule no-interruption
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (leads-to z0 i0 z2 i2) (trans z1 i1)
          (same-locn z0 i0 z1 i1) (prec z0 i0 z1 i1) (prec z1 i1 z2 i2))
        (false))))
  (defgenrule shearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (same-locn z0 i0 z2 i2)
          (prec z0 i0 z2 i2))
        (or (and (= z1 z2) (= i1 i2)) (prec z1 i1 z2 i2)))))
  (defgenrule invShearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (same-locn z0 i0 z1 i1)
          (leads-to z1 i1 z2 i2) (prec z0 i0 z2 i2))
        (or (and (= z0 z1) (= i0 i1)) (prec z0 i0 z1 i1)))))
  (defgenrule fact-servera-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p &quot;servera&quot; z (idx 5)) (p &quot;servera&quot; &quot;s&quot; z s)
          (p &quot;servera&quot; &quot;u&quot; z u)) (fact neq u s))))
  (defgenrule fact-serverr-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p &quot;serverr&quot; z (idx 6)) (p &quot;serverr&quot; &quot;s&quot; z s)
          (p &quot;serverr&quot; &quot;u&quot; z u)) (fact neq u s))))
  (defgenrule trRl_clienta-at-7
    (forall ((z strd))
      (implies (p &quot;clienta&quot; z (idx 8)) (trans z (idx 7)))))
  (defgenrule trRl_clienta-at-6
    (forall ((z strd))
      (implies (p &quot;clienta&quot; z (idx 8)) (trans z (idx 6)))))
  (defgenrule trRl_servera-at-7
    (forall ((z strd))
      (implies (p &quot;servera&quot; z (idx 8)) (trans z (idx 7)))))
  (defgenrule trRl_servera-at-6
    (forall ((z strd))
      (implies (p &quot;servera&quot; z (idx 8)) (trans z (idx 6)))))
  (defgenrule gen-st-clientr-0
    (forall ((z strd) (cookie mesg) (s u name))
      (implies
        (and (p &quot;clientr&quot; z (idx 5)) (p &quot;clientr&quot; &quot;cookie&quot; z cookie)
          (p &quot;clientr&quot; &quot;s&quot; z s) (p &quot;clientr&quot; &quot;u&quot; z u))
        (gen-st (cat &quot;client store&quot; u s cookie)))))
  (defgenrule gen-st-serverr-0
    (forall ((z strd) (cookie data) (u s name))
      (implies
        (and (p &quot;serverr&quot; z (idx 6)) (p &quot;serverr&quot; &quot;cookie&quot; z cookie)
          (p &quot;serverr&quot; &quot;u&quot; z u) (p &quot;serverr&quot; &quot;s&quot; z s))
        (gen-st (cat &quot;server store&quot; s u cookie)))))
  (lang (random32 atom) (random48 atom) (password atom) (httpreq atom)
    (httpdata atom)))</pre>

<p id="k0">Item <a href="#t0">0</a>, Child: <a href="#k26">26</a>.</p>

<div>
 <svg
  class='diagram' width='79.920pt' height='829.920pt'
  xmlns='http://www.w3.org/2000/svg' version='1.1'
  viewBox='0 0 79.920 829.920' font-size='12.000'>
  <defs>
   <marker
    id='arrow' orient='auto' markerWidth='5' markerHeight='10' refX='5'
    refY='5'>
    <path
     d='M 0 0 5 5 0 10'
     style='stroke-width: 2; fill: none; stroke: black;'/></marker>
   </defs>
  <line
   x1='39.960' y1='114.960' x2='39.960' y2='789.960'
   style='stroke-width: 0.960; stroke: gray;'/>
  <g>
   <title>(enc response (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle style='fill: red;' cx='39.960' cy='789.960' r='6.000'/></g>
  <g>
   <title>(enc cookie request (hash (hash pms cr sr) &quot;client_write&quot;))</title>
   <circle cx='39.960' cy='714.960' r='6.000'/></g>
  <g>
   <title>(ch-msg cookiestor (cat pt-0 &quot;client store&quot; u s cookie))</title>
   <circle style='fill: gray;' cx='39.960' cy='639.960' r='6.000'/></g>
  <g><title>(ch-msg cookiestor (cat pt any))</title>
   <circle style='fill: gray;' cx='39.960' cy='564.960' r='6.000'/></g>
  <g>
   <title>(enc &quot;login-successful&quot; cookie (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle style='fill: red;' cx='39.960' cy='489.960' r='6.000'/></g>
  <g>
   <title>(enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;))</title>
   <circle cx='39.960' cy='414.960' r='6.000'/></g>
  <g>
   <title>(enc (hash pms &quot;server finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))) (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle style='fill: red;' cx='39.960' cy='339.960' r='6.000'/></g>
  <g>
   <title>(cat (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))</title>
   <circle cx='39.960' cy='264.960' r='6.000'/></g>
  <g><title>(cat sr s spk (enc (hash s spk) (privk ca)))</title>
   <circle style='fill: red;' cx='39.960' cy='189.960' r='6.000'/></g>
  <g><title>cr</title><circle cx='39.960' cy='114.960' r='6.000'/></g>
  <g>
   <title>((cookie cookie) (any any) (response response) (request request) (p p) (cr cr) (sr sr) (pms pms) (spk spk) (u u) (s s) (ca ca) (cookiestor cookiestor))</title>
   <text
    x='39.960' y='77.460' style='text-anchor: middle;'>clienta</text>
   </g>
  <text x='39.960' y='39.960' style='text-anchor: middle;'>ca 0</text>
  </svg></div>

<pre>(defskeleton ca
  (vars (cookie any mesg) (response httpdata) (request httpreq)
    (p password) (cr sr random32) (pms random48) (spk akey)
    (u s ca name) (pt pt-0 pval) (cookiestor locn))
  (defstrand clienta 10 (cookie cookie) (any any) (response response)
    (request request) (p p) (cr cr) (sr sr) (pms pms) (spk spk) (u u)
    (s s) (ca ca) (cookiestor cookiestor))
  (non-orig (invk spk) (privk ca))
  (pen-non-orig p)
  (uniq-orig cr sr pms)
  (traces
    ((send cr) (recv (cat sr s spk (enc (hash s spk) (privk ca))))
      (send
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (recv
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (send (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv
        (enc &quot;login-successful&quot; cookie
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (load cookiestor (cat pt any))
      (stor cookiestor (cat pt-0 &quot;client store&quot; u s cookie))
      (send (enc cookie request (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv (enc response (hash (hash pms cr sr) &quot;server_write&quot;)))))
  (label 0)
  (unrealized (0 1) (0 3) (0 5) (0 9))
  (origs (pt-0 (0 7)) (cr (0 0)) (pms (0 2)))
  (comment &quot;Not closed under rules&quot;))</pre>

<p id="k26">Item <a href="#t0">26</a>, Parent: <a href="#k0">0</a>.</p>

<div>
 <svg
  class='diagram' width='179.880pt' height='829.920pt'
  xmlns='http://www.w3.org/2000/svg' version='1.1'
  viewBox='0 0 179.880 829.920' font-size='12.000'>
  <defs>
   <marker
    id='arrow' orient='auto' markerWidth='5' markerHeight='10' refX='5'
    refY='5'>
    <path
     d='M 0 0 5 5 0 10'
     style='stroke-width: 2; fill: none; stroke: black;'/></marker>
   </defs>
  <line
   x1='139.920' y1='114.960' x2='139.920' y2='789.960'
   style='stroke-width: 0.960; stroke: gray;'/>
  <line
   x1='39.960' y1='114.960' x2='39.960' y2='789.960'
   style='stroke-width: 0.960; stroke: gray;'/>
  <path
   d='M 139.920 789.960 Q 92.940 789.960 45.960 789.960'
   style='stroke-width: 0.960; stroke: black; marker-end: url(#arrow); fill: none;'/>
  <g>
   <title>(enc response (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle cx='139.920' cy='789.960' r='6.000'/></g>
  <g>
   <title>(enc (enc cookie (hash ppk (hash pms cr sr))) request (hash (hash pms cr sr) &quot;client_write&quot;))</title>
   <circle style='fill: blue;' cx='139.920' cy='714.960' r='6.000'/></g>
  <g>
   <title>(ch-msg authstor (cat pt-2 &quot;server store&quot; s u cookie))</title>
   <circle style='fill: gray;' cx='139.920' cy='639.960' r='6.000'/></g>
  <g><title>(ch-msg authstor (cat pt-1 any-0))</title>
   <circle style='fill: gray;' cx='139.920' cy='564.960' r='6.000'/></g>
  <path
   d='M 139.920 489.960 Q 92.940 489.960 45.960 489.960'
   style='stroke-width: 0.960; stroke: black; marker-end: url(#arrow); fill: none;'/>
  <g>
   <title>(enc &quot;login-successful&quot; (enc cookie (hash ppk (hash pms cr sr))) (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle cx='139.920' cy='489.960' r='6.000'/></g>
  <g>
   <title>(enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;))</title>
   <circle style='fill: blue;' cx='139.920' cy='414.960' r='6.000'/></g>
  <path
   d='M 139.920 339.960 Q 92.940 339.960 45.960 339.960'
   style='stroke-width: 0.960; stroke: black; marker-end: url(#arrow); fill: none;'/>
  <g>
   <title>(enc (hash pms &quot;server finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))) (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle cx='139.920' cy='339.960' r='6.000'/></g>
  <g>
   <title>(cat (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))</title>
   <circle style='fill: blue;' cx='139.920' cy='264.960' r='6.000'/></g>
  <path
   d='M 139.920 189.960 Q 92.940 189.960 45.960 189.960'
   style='stroke-width: 0.960; stroke: black; marker-end: url(#arrow); fill: none;'/>
  <g><title>(cat sr s spk (enc (hash s spk) (privk ca)))</title>
   <circle cx='139.920' cy='189.960' r='6.000'/></g>
  <g><title>cr</title>
   <circle style='fill: blue;' cx='139.920' cy='114.960' r='6.000'/></g>
  <g>
   <title>(enc response (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle style='fill: blue;' cx='39.960' cy='789.960' r='6.000'/></g>
  <path
   d='M 39.960 714.960 Q 86.940 714.960 133.920 714.960'
   style='stroke-width: 0.960; stroke: black; marker-end: url(#arrow); fill: none;'/>
  <g>
   <title>(enc (enc cookie (hash ppk (hash pms cr sr))) request (hash (hash pms cr sr) &quot;client_write&quot;))</title>
   <circle cx='39.960' cy='714.960' r='6.000'/></g>
  <g>
   <title>(ch-msg cookiestor (cat pt-0 &quot;client store&quot; u s (enc cookie (hash ppk (hash pms cr sr)))))</title>
   <circle style='fill: gray;' cx='39.960' cy='639.960' r='6.000'/></g>
  <g><title>(ch-msg cookiestor (cat pt any))</title>
   <circle style='fill: gray;' cx='39.960' cy='564.960' r='6.000'/></g>
  <g>
   <title>(enc &quot;login-successful&quot; (enc cookie (hash ppk (hash pms cr sr))) (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle style='fill: blue;' cx='39.960' cy='489.960' r='6.000'/></g>
  <path
   d='M 39.960 414.960 Q 86.940 414.960 133.920 414.960'
   style='stroke-width: 0.960; stroke: black; marker-end: url(#arrow); fill: none;'/>
  <g>
   <title>(enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;))</title>
   <circle cx='39.960' cy='414.960' r='6.000'/></g>
  <g>
   <title>(enc (hash pms &quot;server finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))) (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle style='fill: blue;' cx='39.960' cy='339.960' r='6.000'/></g>
  <path
   d='M 39.960 264.960 Q 86.940 264.960 133.920 264.960'
   style='stroke-width: 0.960; stroke: black; marker-end: url(#arrow); fill: none;'/>
  <g>
   <title>(cat (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))</title>
   <circle cx='39.960' cy='264.960' r='6.000'/></g>
  <g><title>(cat sr s spk (enc (hash s spk) (privk ca)))</title>
   <circle style='fill: blue;' cx='39.960' cy='189.960' r='6.000'/></g>
  <path
   d='M 39.960 114.960 Q 86.940 114.960 133.920 114.960'
   style='stroke-width: 0.960; stroke: black; marker-end: url(#arrow); fill: none;'/>
  <g><title>cr</title><circle cx='39.960' cy='114.960' r='6.000'/></g>
  <g>
   <title>((any any-0) (cookie cookie) (response response) (request request) (p p) (cr cr) (sr sr) (pms pms) (ppk ppk) (spk spk) (u u) (s s) (ca ca) (authstor authstor))</title>
   <text
    x='139.920' y='77.460' style='text-anchor: middle;'>servera</text>
   </g>
  <g>
   <title>((cookie (enc cookie (hash ppk (hash pms cr sr)))) (any any) (response response) (request request) (p p) (cr cr) (sr sr) (pms pms) (spk spk) (u u) (s s) (ca ca) (cookiestor cookiestor))</title>
   <text
    x='39.960' y='77.460' style='text-anchor: middle;'>clienta</text>
   </g>
  <text x='89.940' y='39.960' style='text-anchor: middle;'>ca 26</text>
  </svg></div>

<pre>(defskeleton ca
  (vars (any any-0 mesg) (cookie data) (response httpdata)
    (request httpreq) (p password) (cr sr random32) (pms random48)
    (ppk skey) (spk akey) (u s ca name) (pt pt-0 pt-1 pt-2 pval)
    (cookiestor authstor locn))
  (defstrand clienta 10
    (cookie (enc cookie (hash ppk (hash pms cr sr)))) (any any)
    (response response) (request request) (p p) (cr cr) (sr sr)
    (pms pms) (spk spk) (u u) (s s) (ca ca) (cookiestor cookiestor))
  (defstrand servera 10 (any any-0) (cookie cookie) (response response)
    (request request) (p p) (cr cr) (sr sr) (pms pms) (ppk ppk)
    (spk spk) (u u) (s s) (ca ca) (authstor authstor))
  (precedes ((0 0) (1 0)) ((0 2) (1 2)) ((0 4) (1 4)) ((0 8) (1 8))
    ((1 1) (0 1)) ((1 3) (0 3)) ((1 5) (0 5)) ((1 9) (0 9)))
  (non-orig ppk (invk spk) (privk ca))
  (pen-non-orig p)
  (uniq-orig cookie cr sr pms)
  (facts (neq u s))
  (rule fact-servera-neq0 trRl_clienta-at-6 trRl_clienta-at-7
    trRl_servera-at-6 trRl_servera-at-7)
  (operation encryption-test (displaced 2 0 clienta 9)
    (enc (enc cookie (hash ppk (hash pms cr sr))) request-0
      (hash (hash pms cr sr) &quot;client_write&quot;)) (1 8))
  (traces
    ((send cr) (recv (cat sr s spk (enc (hash s spk) (privk ca))))
      (send
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (recv
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (send (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv
        (enc &quot;login-successful&quot; (enc cookie (hash ppk (hash pms cr sr)))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (load cookiestor (cat pt any))
      (stor cookiestor
        (cat pt-0 &quot;client store&quot; u s
          (enc cookie (hash ppk (hash pms cr sr)))))
      (send
        (enc (enc cookie (hash ppk (hash pms cr sr))) request
          (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    ((recv cr) (send (cat sr s spk (enc (hash s spk) (privk ca))))
      (recv
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (send
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (recv (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (send
        (enc &quot;login-successful&quot; (enc cookie (hash ppk (hash pms cr sr)))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (load authstor (cat pt-1 any-0))
      (stor authstor (cat pt-2 &quot;server store&quot; s u cookie))
      (recv
        (enc (enc cookie (hash ppk (hash pms cr sr))) request
          (hash (hash pms cr sr) &quot;client_write&quot;)))
      (send (enc response (hash (hash pms cr sr) &quot;server_write&quot;)))))
  (label 26)
  (parent 0)
  (realized)
  (shape)
  (maps
    ((0)
      ((u u) (s s) (ca ca) (spk spk) (p p) (cr cr) (sr sr) (pms pms)
        (cookie (enc cookie (hash ppk (hash pms cr sr)))) (any any)
        (cookiestor cookiestor) (request request) (response response))))
  (origs (pt-0 (0 7)) (cookie (1 5)) (pt-2 (1 7)) (cr (0 0)) (pms (0 2))
    (sr (1 1))))</pre>

<p id="t40">Tree <a href="#top">40</a>, POV <a href="#k40">40</a>.</p>

<div>
 <svg
  class='diagram' width='79.920pt' height='79.920pt'
  xmlns='http://www.w3.org/2000/svg' version='1.1'
  viewBox='0 0 79.920 79.920' font-size='12.000'>
  <text
   x='39.960' y='26.040' style='text-anchor: middle; fill: black;'
   onclick='window.open(&quot;#k40&quot;, &quot;_self&quot;)'>40</text>
  </svg></div>

<pre>(defprotocol ca basic
  (defrole clienta
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (p password) (cookie any mesg) (cookiestor locn) (request httpreq)
      (response httpdata))
    (trace (send cr) (recv (cat sr s spk (enc (hash s spk) (privk ca))))
      (send
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (recv
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (send (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv
        (enc &quot;login-successful&quot; cookie
          (hash (hash pms cr sr) &quot;server_write&quot;))) (load cookiestor any)
      (stor cookiestor (cat &quot;client store&quot; u s cookie))
      (send (enc cookie request (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv (enc response (hash (hash pms cr sr) &quot;server_write&quot;)))))
  (defrole clientr
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (cookie mesg) (cookiestor locn) (request httpreq)
      (response httpdata))
    (trace (send cr) (recv (cat sr s spk (enc (hash s spk) (privk ca))))
      (send
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (recv
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (load cookiestor (cat &quot;client store&quot; u s cookie))
      (send (enc cookie request (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    (gen-st (cat &quot;client store&quot; u s cookie)))
  (defrole servera
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (p password) (cookie data) (ppk skey) (any mesg) (authstor locn)
      (request httpreq) (response httpdata))
    (trace (recv cr) (send (cat sr s spk (enc (hash s spk) (privk ca))))
      (recv
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (send
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (recv (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (send
        (enc &quot;login-successful&quot; (enc cookie (hash ppk (hash pms cr sr)))
          (hash (hash pms cr sr) &quot;server_write&quot;))) (load authstor any)
      (stor authstor (cat &quot;server store&quot; s u cookie))
      (recv
        (enc (enc cookie (hash ppk (hash pms cr sr))) request
          (hash (hash pms cr sr) &quot;client_write&quot;)))
      (send (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    (non-orig ppk)
    (uniq-orig cookie)
    (facts (neq u s)))
  (defrole serverr
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (cookie data) (ppk skey) (authstor locn) (request httpreq)
      (response httpdata))
    (trace (recv cr) (send (cat sr s spk (enc (hash s spk) (privk ca))))
      (recv
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (send
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (recv
        (enc (enc cookie (hash ppk (hash pms cr sr))) request
          (hash (hash pms cr sr) &quot;client_write&quot;)))
      (load authstor (cat &quot;server store&quot; s u cookie))
      (send (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    (non-orig ppk)
    (facts (neq u s))
    (gen-st (cat &quot;server store&quot; s u cookie)))
  (defgenrule neqRl_indx
    (forall ((x indx)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_strd
    (forall ((x strd)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_mesg
    (forall ((x mesg)) (implies (fact neq x x) (false))))
  (defgenrule scissorsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (leads-to z0 i0 z2 i2))
        (and (= z1 z2) (= i1 i2)))))
  (defgenrule cakeRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (leads-to z0 i0 z1 i1)
          (leads-to z0 i0 z2 i2) (prec z1 i1 z2 i2)) (false))))
  (defgenrule no-interruption
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (leads-to z0 i0 z2 i2) (trans z1 i1)
          (same-locn z0 i0 z1 i1) (prec z0 i0 z1 i1) (prec z1 i1 z2 i2))
        (false))))
  (defgenrule shearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (same-locn z0 i0 z2 i2)
          (prec z0 i0 z2 i2))
        (or (and (= z1 z2) (= i1 i2)) (prec z1 i1 z2 i2)))))
  (defgenrule invShearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (same-locn z0 i0 z1 i1)
          (leads-to z1 i1 z2 i2) (prec z0 i0 z2 i2))
        (or (and (= z0 z1) (= i0 i1)) (prec z0 i0 z1 i1)))))
  (defgenrule fact-servera-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p &quot;servera&quot; z (idx 5)) (p &quot;servera&quot; &quot;s&quot; z s)
          (p &quot;servera&quot; &quot;u&quot; z u)) (fact neq u s))))
  (defgenrule fact-serverr-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p &quot;serverr&quot; z (idx 6)) (p &quot;serverr&quot; &quot;s&quot; z s)
          (p &quot;serverr&quot; &quot;u&quot; z u)) (fact neq u s))))
  (defgenrule trRl_clienta-at-7
    (forall ((z strd))
      (implies (p &quot;clienta&quot; z (idx 8)) (trans z (idx 7)))))
  (defgenrule trRl_clienta-at-6
    (forall ((z strd))
      (implies (p &quot;clienta&quot; z (idx 8)) (trans z (idx 6)))))
  (defgenrule trRl_servera-at-7
    (forall ((z strd))
      (implies (p &quot;servera&quot; z (idx 8)) (trans z (idx 7)))))
  (defgenrule trRl_servera-at-6
    (forall ((z strd))
      (implies (p &quot;servera&quot; z (idx 8)) (trans z (idx 6)))))
  (defgenrule gen-st-clientr-0
    (forall ((z strd) (cookie mesg) (s u name))
      (implies
        (and (p &quot;clientr&quot; z (idx 5)) (p &quot;clientr&quot; &quot;cookie&quot; z cookie)
          (p &quot;clientr&quot; &quot;s&quot; z s) (p &quot;clientr&quot; &quot;u&quot; z u))
        (gen-st (cat &quot;client store&quot; u s cookie)))))
  (defgenrule gen-st-serverr-0
    (forall ((z strd) (cookie data) (u s name))
      (implies
        (and (p &quot;serverr&quot; z (idx 6)) (p &quot;serverr&quot; &quot;cookie&quot; z cookie)
          (p &quot;serverr&quot; &quot;u&quot; z u) (p &quot;serverr&quot; &quot;s&quot; z s))
        (gen-st (cat &quot;server store&quot; s u cookie)))))
  (lang (random32 atom) (random48 atom) (password atom) (httpreq atom)
    (httpdata atom)))</pre>

<p id="k40">Item <a href="#t40">40</a>.</p>

<div>
 <svg
  class='diagram' width='179.880pt' height='829.920pt'
  xmlns='http://www.w3.org/2000/svg' version='1.1'
  viewBox='0 0 179.880 829.920' font-size='12.000'>
  <defs>
   <marker
    id='arrow' orient='auto' markerWidth='5' markerHeight='10' refX='5'
    refY='5'>
    <path
     d='M 0 0 5 5 0 10'
     style='stroke-width: 2; fill: none; stroke: black;'/></marker>
   </defs>
  <line
   x1='139.920' y1='114.960' x2='139.920' y2='189.960'
   style='stroke-width: 0.960; stroke: gray;'/>
  <line
   x1='39.960' y1='114.960' x2='39.960' y2='789.960'
   style='stroke-width: 0.960; stroke: gray;'/>
  <g><title>cookie</title><circle cx='139.920' cy='189.960' r='6.000'/>
   </g>
  <g><title>cookie</title>
   <circle style='fill: blue;' cx='139.920' cy='114.960' r='6.000'/></g>
  <g>
   <title>(enc response (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle style='fill: red;' cx='39.960' cy='789.960' r='6.000'/></g>
  <g>
   <title>(enc cookie request (hash (hash pms cr sr) &quot;client_write&quot;))</title>
   <circle cx='39.960' cy='714.960' r='6.000'/></g>
  <g>
   <title>(ch-msg cookiestor (cat pt-0 &quot;client store&quot; u s cookie))</title>
   <circle style='fill: gray;' cx='39.960' cy='639.960' r='6.000'/></g>
  <g><title>(ch-msg cookiestor (cat pt any))</title>
   <circle style='fill: gray;' cx='39.960' cy='564.960' r='6.000'/></g>
  <g>
   <title>(enc &quot;login-successful&quot; cookie (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle style='fill: red;' cx='39.960' cy='489.960' r='6.000'/></g>
  <g>
   <title>(enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;))</title>
   <circle cx='39.960' cy='414.960' r='6.000'/></g>
  <g>
   <title>(enc (hash pms &quot;server finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))) (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle style='fill: red;' cx='39.960' cy='339.960' r='6.000'/></g>
  <g>
   <title>(cat (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))</title>
   <circle cx='39.960' cy='264.960' r='6.000'/></g>
  <g><title>(cat sr s spk (enc (hash s spk) (privk ca)))</title>
   <circle style='fill: red;' cx='39.960' cy='189.960' r='6.000'/></g>
  <g><title>cr</title><circle cx='39.960' cy='114.960' r='6.000'/></g>
  <g>
   <title>((cookie cookie) (any any) (response response) (request request) (p p) (cr cr) (sr sr) (pms pms) (spk spk) (u u) (s s) (ca ca) (cookiestor cookiestor))</title>
   <text
    x='39.960' y='77.460' style='text-anchor: middle;'>clienta</text>
   </g>
  <text x='89.940' y='39.960' style='text-anchor: middle;'>ca 40</text>
  </svg></div>

<pre>(defskeleton ca
  (vars (any mesg) (cookie data) (response httpdata) (request httpreq)
    (p password) (cr sr random32) (pms random48) (spk akey)
    (u s ca name) (pt pt-0 pval) (cookiestor locn))
  (defstrand clienta 10 (cookie cookie) (any any) (response response)
    (request request) (p p) (cr cr) (sr sr) (pms pms) (spk spk) (u u)
    (s s) (ca ca) (cookiestor cookiestor))
  (deflistener cookie)
  (non-orig (invk spk) (privk ca))
  (pen-non-orig p)
  (uniq-orig cr sr pms)
  (traces
    ((send cr) (recv (cat sr s spk (enc (hash s spk) (privk ca))))
      (send
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (recv
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (send (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv
        (enc &quot;login-successful&quot; cookie
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (load cookiestor (cat pt any))
      (stor cookiestor (cat pt-0 &quot;client store&quot; u s cookie))
      (send (enc cookie request (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    ((recv cookie) (send cookie)))
  (label 40)
  (unrealized (0 1) (0 3) (0 5) (0 9))
  (origs (pt-0 (0 7)) (cr (0 0)) (pms (0 2)))
  (comment &quot;Not closed under rules&quot;))</pre>

<p id="t54">Tree <a href="#top">54</a>, POV <a href="#k54">54</a>.</p>

<div>
 <svg
  class='diagram' width='79.920pt' height='79.920pt'
  xmlns='http://www.w3.org/2000/svg' version='1.1'
  viewBox='0 0 79.920 79.920' font-size='12.000'>
  <text
   x='39.960' y='26.040' style='text-anchor: middle; fill: black;'
   onclick='window.open(&quot;#k54&quot;, &quot;_self&quot;)'>54</text>
  </svg></div>

<pre>(defprotocol ca basic
  (defrole clienta
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (p password) (cookie any mesg) (cookiestor locn) (request httpreq)
      (response httpdata))
    (trace (send cr) (recv (cat sr s spk (enc (hash s spk) (privk ca))))
      (send
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (recv
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (send (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv
        (enc &quot;login-successful&quot; cookie
          (hash (hash pms cr sr) &quot;server_write&quot;))) (load cookiestor any)
      (stor cookiestor (cat &quot;client store&quot; u s cookie))
      (send (enc cookie request (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv (enc response (hash (hash pms cr sr) &quot;server_write&quot;)))))
  (defrole clientr
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (cookie mesg) (cookiestor locn) (request httpreq)
      (response httpdata))
    (trace (send cr) (recv (cat sr s spk (enc (hash s spk) (privk ca))))
      (send
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (recv
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (load cookiestor (cat &quot;client store&quot; u s cookie))
      (send (enc cookie request (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    (gen-st (cat &quot;client store&quot; u s cookie)))
  (defrole servera
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (p password) (cookie data) (ppk skey) (any mesg) (authstor locn)
      (request httpreq) (response httpdata))
    (trace (recv cr) (send (cat sr s spk (enc (hash s spk) (privk ca))))
      (recv
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (send
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (recv (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (send
        (enc &quot;login-successful&quot; (enc cookie (hash ppk (hash pms cr sr)))
          (hash (hash pms cr sr) &quot;server_write&quot;))) (load authstor any)
      (stor authstor (cat &quot;server store&quot; s u cookie))
      (recv
        (enc (enc cookie (hash ppk (hash pms cr sr))) request
          (hash (hash pms cr sr) &quot;client_write&quot;)))
      (send (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    (non-orig ppk)
    (uniq-orig cookie)
    (facts (neq u s)))
  (defrole serverr
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (cookie data) (ppk skey) (authstor locn) (request httpreq)
      (response httpdata))
    (trace (recv cr) (send (cat sr s spk (enc (hash s spk) (privk ca))))
      (recv
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (send
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (recv
        (enc (enc cookie (hash ppk (hash pms cr sr))) request
          (hash (hash pms cr sr) &quot;client_write&quot;)))
      (load authstor (cat &quot;server store&quot; s u cookie))
      (send (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    (non-orig ppk)
    (facts (neq u s))
    (gen-st (cat &quot;server store&quot; s u cookie)))
  (defgenrule neqRl_indx
    (forall ((x indx)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_strd
    (forall ((x strd)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_mesg
    (forall ((x mesg)) (implies (fact neq x x) (false))))
  (defgenrule scissorsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (leads-to z0 i0 z2 i2))
        (and (= z1 z2) (= i1 i2)))))
  (defgenrule cakeRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (leads-to z0 i0 z1 i1)
          (leads-to z0 i0 z2 i2) (prec z1 i1 z2 i2)) (false))))
  (defgenrule no-interruption
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (leads-to z0 i0 z2 i2) (trans z1 i1)
          (same-locn z0 i0 z1 i1) (prec z0 i0 z1 i1) (prec z1 i1 z2 i2))
        (false))))
  (defgenrule shearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (same-locn z0 i0 z2 i2)
          (prec z0 i0 z2 i2))
        (or (and (= z1 z2) (= i1 i2)) (prec z1 i1 z2 i2)))))
  (defgenrule invShearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (same-locn z0 i0 z1 i1)
          (leads-to z1 i1 z2 i2) (prec z0 i0 z2 i2))
        (or (and (= z0 z1) (= i0 i1)) (prec z0 i0 z1 i1)))))
  (defgenrule fact-servera-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p &quot;servera&quot; z (idx 5)) (p &quot;servera&quot; &quot;s&quot; z s)
          (p &quot;servera&quot; &quot;u&quot; z u)) (fact neq u s))))
  (defgenrule fact-serverr-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p &quot;serverr&quot; z (idx 6)) (p &quot;serverr&quot; &quot;s&quot; z s)
          (p &quot;serverr&quot; &quot;u&quot; z u)) (fact neq u s))))
  (defgenrule trRl_clienta-at-7
    (forall ((z strd))
      (implies (p &quot;clienta&quot; z (idx 8)) (trans z (idx 7)))))
  (defgenrule trRl_clienta-at-6
    (forall ((z strd))
      (implies (p &quot;clienta&quot; z (idx 8)) (trans z (idx 6)))))
  (defgenrule trRl_servera-at-7
    (forall ((z strd))
      (implies (p &quot;servera&quot; z (idx 8)) (trans z (idx 7)))))
  (defgenrule trRl_servera-at-6
    (forall ((z strd))
      (implies (p &quot;servera&quot; z (idx 8)) (trans z (idx 6)))))
  (defgenrule gen-st-clientr-0
    (forall ((z strd) (cookie mesg) (s u name))
      (implies
        (and (p &quot;clientr&quot; z (idx 5)) (p &quot;clientr&quot; &quot;cookie&quot; z cookie)
          (p &quot;clientr&quot; &quot;s&quot; z s) (p &quot;clientr&quot; &quot;u&quot; z u))
        (gen-st (cat &quot;client store&quot; u s cookie)))))
  (defgenrule gen-st-serverr-0
    (forall ((z strd) (cookie data) (u s name))
      (implies
        (and (p &quot;serverr&quot; z (idx 6)) (p &quot;serverr&quot; &quot;cookie&quot; z cookie)
          (p &quot;serverr&quot; &quot;u&quot; z u) (p &quot;serverr&quot; &quot;s&quot; z s))
        (gen-st (cat &quot;server store&quot; s u cookie)))))
  (lang (random32 atom) (random48 atom) (password atom) (httpreq atom)
    (httpdata atom)))</pre>

<p id="k54">Item <a href="#t54">54</a>.</p>

<div>
 <svg
  class='diagram' width='79.920pt' height='604.920pt'
  xmlns='http://www.w3.org/2000/svg' version='1.1'
  viewBox='0 0 79.920 604.920' font-size='12.000'>
  <defs>
   <marker
    id='arrow' orient='auto' markerWidth='5' markerHeight='10' refX='5'
    refY='5'>
    <path
     d='M 0 0 5 5 0 10'
     style='stroke-width: 2; fill: none; stroke: black;'/></marker>
   </defs>
  <line
   x1='39.960' y1='114.960' x2='39.960' y2='564.960'
   style='stroke-width: 0.960; stroke: gray;'/>
  <g>
   <title>(enc response (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle style='fill: red;' cx='39.960' cy='564.960' r='6.000'/></g>
  <g>
   <title>(enc cookie request (hash (hash pms cr sr) &quot;client_write&quot;))</title>
   <circle cx='39.960' cy='489.960' r='6.000'/></g>
  <g>
   <title>(ch-msg cookiestor (cat pt &quot;client store&quot; u s cookie))</title>
   <circle style='fill: gray;' cx='39.960' cy='414.960' r='6.000'/></g>
  <g>
   <title>(enc (hash pms &quot;server finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))) (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle style='fill: red;' cx='39.960' cy='339.960' r='6.000'/></g>
  <g>
   <title>(cat (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))</title>
   <circle cx='39.960' cy='264.960' r='6.000'/></g>
  <g><title>(cat sr s spk (enc (hash s spk) (privk ca)))</title>
   <circle style='fill: red;' cx='39.960' cy='189.960' r='6.000'/></g>
  <g><title>cr</title><circle cx='39.960' cy='114.960' r='6.000'/></g>
  <g>
   <title>((cookie cookie) (response response) (request request) (cr cr) (sr sr) (pms pms) (spk spk) (u u) (s s) (ca ca) (cookiestor cookiestor))</title>
   <text
    x='39.960' y='77.460' style='text-anchor: middle;'>clientr</text>
   </g>
  <text x='39.960' y='39.960' style='text-anchor: middle;'>ca 54</text>
  </svg></div>

<pre>(defskeleton ca
  (vars (cookie mesg) (response httpdata) (request httpreq)
    (cr sr random32) (pms random48) (spk akey) (s ca u name) (pt pval)
    (cookiestor locn))
  (defstrand clientr 7 (cookie cookie) (response response)
    (request request) (cr cr) (sr sr) (pms pms) (spk spk) (u u) (s s)
    (ca ca) (cookiestor cookiestor))
  (non-orig (invk spk) (privk ca))
  (uniq-orig cr sr pms)
  (traces
    ((send cr) (recv (cat sr s spk (enc (hash s spk) (privk ca))))
      (send
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (recv
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (load cookiestor (cat pt &quot;client store&quot; u s cookie))
      (send (enc cookie request (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv (enc response (hash (hash pms cr sr) &quot;server_write&quot;)))))
  (label 54)
  (unrealized (0 1) (0 3) (0 6))
  (origs (cr (0 0)) (pms (0 2)))
  (comment &quot;Not closed under rules&quot;))</pre>

<p id="t94">Tree <a href="#top">94</a>, POV <a href="#k94">94</a>.</p>

<div>
 <svg
  class='diagram' width='129.840pt' height='79.920pt'
  xmlns='http://www.w3.org/2000/svg' version='1.1'
  viewBox='0 0 129.840 79.920' font-size='12.000'>
  <text
   x='89.880' y='26.040'
   style='font-weight: bold; text-anchor: middle; fill: blue;'
   onclick='window.open(&quot;#k95&quot;, &quot;_self&quot;)'>95</text>
  <line
   x1='39.960' y1='39.960' x2='89.880' y2='39.960'
   style='stroke-width: 0.960; stroke: gray;'/>
  <text
   x='39.960' y='26.040' style='text-anchor: middle; fill: black;'
   onclick='window.open(&quot;#k94&quot;, &quot;_self&quot;)'>94</text>
  </svg></div>

<pre>(defprotocol ca basic
  (defrole clienta
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (p password) (cookie any mesg) (cookiestor locn) (request httpreq)
      (response httpdata))
    (trace (send cr) (recv (cat sr s spk (enc (hash s spk) (privk ca))))
      (send
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (recv
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (send (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv
        (enc &quot;login-successful&quot; cookie
          (hash (hash pms cr sr) &quot;server_write&quot;))) (load cookiestor any)
      (stor cookiestor (cat &quot;client store&quot; u s cookie))
      (send (enc cookie request (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv (enc response (hash (hash pms cr sr) &quot;server_write&quot;)))))
  (defrole clientr
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (cookie mesg) (cookiestor locn) (request httpreq)
      (response httpdata))
    (trace (send cr) (recv (cat sr s spk (enc (hash s spk) (privk ca))))
      (send
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (recv
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (load cookiestor (cat &quot;client store&quot; u s cookie))
      (send (enc cookie request (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    (gen-st (cat &quot;client store&quot; u s cookie)))
  (defrole servera
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (p password) (cookie data) (ppk skey) (any mesg) (authstor locn)
      (request httpreq) (response httpdata))
    (trace (recv cr) (send (cat sr s spk (enc (hash s spk) (privk ca))))
      (recv
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (send
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (recv (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (send
        (enc &quot;login-successful&quot; (enc cookie (hash ppk (hash pms cr sr)))
          (hash (hash pms cr sr) &quot;server_write&quot;))) (load authstor any)
      (stor authstor (cat &quot;server store&quot; s u cookie))
      (recv
        (enc (enc cookie (hash ppk (hash pms cr sr))) request
          (hash (hash pms cr sr) &quot;client_write&quot;)))
      (send (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    (non-orig ppk)
    (uniq-orig cookie)
    (facts (neq u s)))
  (defrole serverr
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (cookie data) (ppk skey) (authstor locn) (request httpreq)
      (response httpdata))
    (trace (recv cr) (send (cat sr s spk (enc (hash s spk) (privk ca))))
      (recv
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (send
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (recv
        (enc (enc cookie (hash ppk (hash pms cr sr))) request
          (hash (hash pms cr sr) &quot;client_write&quot;)))
      (load authstor (cat &quot;server store&quot; s u cookie))
      (send (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    (non-orig ppk)
    (facts (neq u s))
    (gen-st (cat &quot;server store&quot; s u cookie)))
  (defgenrule neqRl_indx
    (forall ((x indx)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_strd
    (forall ((x strd)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_mesg
    (forall ((x mesg)) (implies (fact neq x x) (false))))
  (defgenrule scissorsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (leads-to z0 i0 z2 i2))
        (and (= z1 z2) (= i1 i2)))))
  (defgenrule cakeRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (leads-to z0 i0 z1 i1)
          (leads-to z0 i0 z2 i2) (prec z1 i1 z2 i2)) (false))))
  (defgenrule no-interruption
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (leads-to z0 i0 z2 i2) (trans z1 i1)
          (same-locn z0 i0 z1 i1) (prec z0 i0 z1 i1) (prec z1 i1 z2 i2))
        (false))))
  (defgenrule shearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (same-locn z0 i0 z2 i2)
          (prec z0 i0 z2 i2))
        (or (and (= z1 z2) (= i1 i2)) (prec z1 i1 z2 i2)))))
  (defgenrule invShearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (same-locn z0 i0 z1 i1)
          (leads-to z1 i1 z2 i2) (prec z0 i0 z2 i2))
        (or (and (= z0 z1) (= i0 i1)) (prec z0 i0 z1 i1)))))
  (defgenrule fact-servera-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p &quot;servera&quot; z (idx 5)) (p &quot;servera&quot; &quot;s&quot; z s)
          (p &quot;servera&quot; &quot;u&quot; z u)) (fact neq u s))))
  (defgenrule fact-serverr-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p &quot;serverr&quot; z (idx 6)) (p &quot;serverr&quot; &quot;s&quot; z s)
          (p &quot;serverr&quot; &quot;u&quot; z u)) (fact neq u s))))
  (defgenrule trRl_clienta-at-7
    (forall ((z strd))
      (implies (p &quot;clienta&quot; z (idx 8)) (trans z (idx 7)))))
  (defgenrule trRl_clienta-at-6
    (forall ((z strd))
      (implies (p &quot;clienta&quot; z (idx 8)) (trans z (idx 6)))))
  (defgenrule trRl_servera-at-7
    (forall ((z strd))
      (implies (p &quot;servera&quot; z (idx 8)) (trans z (idx 7)))))
  (defgenrule trRl_servera-at-6
    (forall ((z strd))
      (implies (p &quot;servera&quot; z (idx 8)) (trans z (idx 6)))))
  (defgenrule gen-st-clientr-0
    (forall ((z strd) (cookie mesg) (s u name))
      (implies
        (and (p &quot;clientr&quot; z (idx 5)) (p &quot;clientr&quot; &quot;cookie&quot; z cookie)
          (p &quot;clientr&quot; &quot;s&quot; z s) (p &quot;clientr&quot; &quot;u&quot; z u))
        (gen-st (cat &quot;client store&quot; u s cookie)))))
  (defgenrule gen-st-serverr-0
    (forall ((z strd) (cookie data) (u s name))
      (implies
        (and (p &quot;serverr&quot; z (idx 6)) (p &quot;serverr&quot; &quot;cookie&quot; z cookie)
          (p &quot;serverr&quot; &quot;u&quot; z u) (p &quot;serverr&quot; &quot;s&quot; z s))
        (gen-st (cat &quot;server store&quot; s u cookie)))))
  (lang (random32 atom) (random48 atom) (password atom) (httpreq atom)
    (httpdata atom)))</pre>

<p id="k94">Item <a href="#t94">94</a>, Child: <a href="#k95">95</a>.</p>

<div>
 <svg
  class='diagram' width='79.920pt' height='754.920pt'
  xmlns='http://www.w3.org/2000/svg' version='1.1'
  viewBox='0 0 79.920 754.920' font-size='12.000'>
  <defs>
   <marker
    id='arrow' orient='auto' markerWidth='5' markerHeight='10' refX='5'
    refY='5'>
    <path
     d='M 0 0 5 5 0 10'
     style='stroke-width: 2; fill: none; stroke: black;'/></marker>
   </defs>
  <line
   x1='39.960' y1='114.960' x2='39.960' y2='714.960'
   style='stroke-width: 0.960; stroke: gray;'/>
  <g>
   <title>(enc (enc cookie (hash ppk (hash pms cr sr))) request (hash (hash pms cr sr) &quot;client_write&quot;))</title>
   <circle style='fill: blue;' cx='39.960' cy='714.960' r='6.000'/></g>
  <g>
   <title>(ch-msg authstor (cat pt-0 &quot;server store&quot; s u cookie))</title>
   <circle style='fill: gray;' cx='39.960' cy='639.960' r='6.000'/></g>
  <g><title>(ch-msg authstor (cat pt any))</title>
   <circle style='fill: gray;' cx='39.960' cy='564.960' r='6.000'/></g>
  <g>
   <title>(enc &quot;login-successful&quot; (enc cookie (hash ppk (hash pms cr sr))) (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle cx='39.960' cy='489.960' r='6.000'/></g>
  <g>
   <title>(enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;))</title>
   <circle style='fill: blue;' cx='39.960' cy='414.960' r='6.000'/></g>
  <g>
   <title>(enc (hash pms &quot;server finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))) (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle cx='39.960' cy='339.960' r='6.000'/></g>
  <g>
   <title>(cat (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))</title>
   <circle style='fill: blue;' cx='39.960' cy='264.960' r='6.000'/></g>
  <g><title>(cat sr s spk (enc (hash s spk) (privk ca)))</title>
   <circle cx='39.960' cy='189.960' r='6.000'/></g>
  <g><title>cr</title>
   <circle style='fill: blue;' cx='39.960' cy='114.960' r='6.000'/></g>
  <g>
   <title>((any any) (cookie cookie) (request request) (p p) (cr cr) (sr sr) (pms pms) (ppk ppk) (spk spk) (u u) (s s) (ca ca) (authstor authstor))</title>
   <text
    x='39.960' y='77.460' style='text-anchor: middle;'>servera</text>
   </g>
  <text x='39.960' y='39.960' style='text-anchor: middle;'>ca 94</text>
  </svg></div>

<pre>(defskeleton ca
  (vars (any mesg) (cookie data) (request httpreq) (p password)
    (cr sr random32) (pms random48) (ppk skey) (spk akey) (s ca u name)
    (pt pt-0 pval) (authstor locn))
  (defstrand servera 9 (any any) (cookie cookie) (request request) (p p)
    (cr cr) (sr sr) (pms pms) (ppk ppk) (spk spk) (u u) (s s) (ca ca)
    (authstor authstor))
  (non-orig ppk (invk spk) (privk ca))
  (uniq-orig cookie sr)
  (traces
    ((recv cr) (send (cat sr s spk (enc (hash s spk) (privk ca))))
      (recv
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (send
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (recv (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (send
        (enc &quot;login-successful&quot; (enc cookie (hash ppk (hash pms cr sr)))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (load authstor (cat pt any))
      (stor authstor (cat pt-0 &quot;server store&quot; s u cookie))
      (recv
        (enc (enc cookie (hash ppk (hash pms cr sr))) request
          (hash (hash pms cr sr) &quot;client_write&quot;)))))
  (label 94)
  (realized)
  (origs (pt-0 (0 7)) (cookie (0 5)) (sr (0 1)))
  (comment &quot;Not closed under rules&quot;))</pre>

<p id="k95">Item <a href="#t94">95</a>, Parent: <a href="#k94">94</a>.</p>

<div>
 <svg
  class='diagram' width='79.920pt' height='754.920pt'
  xmlns='http://www.w3.org/2000/svg' version='1.1'
  viewBox='0 0 79.920 754.920' font-size='12.000'>
  <defs>
   <marker
    id='arrow' orient='auto' markerWidth='5' markerHeight='10' refX='5'
    refY='5'>
    <path
     d='M 0 0 5 5 0 10'
     style='stroke-width: 2; fill: none; stroke: black;'/></marker>
   </defs>
  <line
   x1='39.960' y1='114.960' x2='39.960' y2='714.960'
   style='stroke-width: 0.960; stroke: gray;'/>
  <g>
   <title>(enc (enc cookie (hash ppk (hash pms cr sr))) request (hash (hash pms cr sr) &quot;client_write&quot;))</title>
   <circle style='fill: blue;' cx='39.960' cy='714.960' r='6.000'/></g>
  <g>
   <title>(ch-msg authstor (cat pt-0 &quot;server store&quot; s u cookie))</title>
   <circle style='fill: gray;' cx='39.960' cy='639.960' r='6.000'/></g>
  <g><title>(ch-msg authstor (cat pt any))</title>
   <circle style='fill: gray;' cx='39.960' cy='564.960' r='6.000'/></g>
  <g>
   <title>(enc &quot;login-successful&quot; (enc cookie (hash ppk (hash pms cr sr))) (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle cx='39.960' cy='489.960' r='6.000'/></g>
  <g>
   <title>(enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;))</title>
   <circle style='fill: blue;' cx='39.960' cy='414.960' r='6.000'/></g>
  <g>
   <title>(enc (hash pms &quot;server finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))) (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle cx='39.960' cy='339.960' r='6.000'/></g>
  <g>
   <title>(cat (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))</title>
   <circle style='fill: blue;' cx='39.960' cy='264.960' r='6.000'/></g>
  <g><title>(cat sr s spk (enc (hash s spk) (privk ca)))</title>
   <circle cx='39.960' cy='189.960' r='6.000'/></g>
  <g><title>cr</title>
   <circle style='fill: blue;' cx='39.960' cy='114.960' r='6.000'/></g>
  <g>
   <title>((any any) (cookie cookie) (request request) (p p) (cr cr) (sr sr) (pms pms) (ppk ppk) (spk spk) (u u) (s s) (ca ca) (authstor authstor))</title>
   <text
    x='39.960' y='77.460' style='text-anchor: middle;'>servera</text>
   </g>
  <text x='39.960' y='39.960' style='text-anchor: middle;'>ca 95</text>
  </svg></div>

<pre>(defskeleton ca
  (vars (any mesg) (cookie data) (request httpreq) (p password)
    (cr sr random32) (pms random48) (ppk skey) (spk akey) (s ca u name)
    (pt pt-0 pval) (authstor locn))
  (defstrand servera 9 (any any) (cookie cookie) (request request) (p p)
    (cr cr) (sr sr) (pms pms) (ppk ppk) (spk spk) (u u) (s s) (ca ca)
    (authstor authstor))
  (non-orig ppk (invk spk) (privk ca))
  (uniq-orig cookie sr)
  (facts (neq u s))
  (rule fact-servera-neq0 trRl_servera-at-6 trRl_servera-at-7)
  (traces
    ((recv cr) (send (cat sr s spk (enc (hash s spk) (privk ca))))
      (recv
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (send
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (recv (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (send
        (enc &quot;login-successful&quot; (enc cookie (hash ppk (hash pms cr sr)))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (load authstor (cat pt any))
      (stor authstor (cat pt-0 &quot;server store&quot; s u cookie))
      (recv
        (enc (enc cookie (hash ppk (hash pms cr sr))) request
          (hash (hash pms cr sr) &quot;client_write&quot;)))))
  (label 95)
  (parent 94)
  (realized)
  (shape)
  (maps
    ((0)
      ((s s) (ca ca) (spk spk) (cr cr) (sr sr) (pms pms) (u u) (p p)
        (cookie cookie) (ppk ppk) (any any) (authstor authstor)
        (request request))))
  (origs (pt-0 (0 7)) (cookie (0 5)) (sr (0 1))))</pre>

<p id="t96">Tree <a href="#top">96</a>, POV <a href="#k96">96</a>.</p>

<div>
 <svg
  class='diagram' width='129.840pt' height='79.920pt'
  xmlns='http://www.w3.org/2000/svg' version='1.1'
  viewBox='0 0 129.840 79.920' font-size='12.000'>
  <text
   x='89.880' y='26.040'
   style='font-weight: bold; text-anchor: middle; fill: blue;'
   onclick='window.open(&quot;#k97&quot;, &quot;_self&quot;)'>97</text>
  <line
   x1='39.960' y1='39.960' x2='89.880' y2='39.960'
   style='stroke-width: 0.960; stroke: gray;'/>
  <text
   x='39.960' y='26.040' style='text-anchor: middle; fill: black;'
   onclick='window.open(&quot;#k96&quot;, &quot;_self&quot;)'>96</text>
  </svg></div>

<pre>(defprotocol ca basic
  (defrole clienta
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (p password) (cookie any mesg) (cookiestor locn) (request httpreq)
      (response httpdata))
    (trace (send cr) (recv (cat sr s spk (enc (hash s spk) (privk ca))))
      (send
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (recv
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (send (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv
        (enc &quot;login-successful&quot; cookie
          (hash (hash pms cr sr) &quot;server_write&quot;))) (load cookiestor any)
      (stor cookiestor (cat &quot;client store&quot; u s cookie))
      (send (enc cookie request (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv (enc response (hash (hash pms cr sr) &quot;server_write&quot;)))))
  (defrole clientr
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (cookie mesg) (cookiestor locn) (request httpreq)
      (response httpdata))
    (trace (send cr) (recv (cat sr s spk (enc (hash s spk) (privk ca))))
      (send
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (recv
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (load cookiestor (cat &quot;client store&quot; u s cookie))
      (send (enc cookie request (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    (gen-st (cat &quot;client store&quot; u s cookie)))
  (defrole servera
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (p password) (cookie data) (ppk skey) (any mesg) (authstor locn)
      (request httpreq) (response httpdata))
    (trace (recv cr) (send (cat sr s spk (enc (hash s spk) (privk ca))))
      (recv
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (send
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (recv (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (send
        (enc &quot;login-successful&quot; (enc cookie (hash ppk (hash pms cr sr)))
          (hash (hash pms cr sr) &quot;server_write&quot;))) (load authstor any)
      (stor authstor (cat &quot;server store&quot; s u cookie))
      (recv
        (enc (enc cookie (hash ppk (hash pms cr sr))) request
          (hash (hash pms cr sr) &quot;client_write&quot;)))
      (send (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    (non-orig ppk)
    (uniq-orig cookie)
    (facts (neq u s)))
  (defrole serverr
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (cookie data) (ppk skey) (authstor locn) (request httpreq)
      (response httpdata))
    (trace (recv cr) (send (cat sr s spk (enc (hash s spk) (privk ca))))
      (recv
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (send
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (recv
        (enc (enc cookie (hash ppk (hash pms cr sr))) request
          (hash (hash pms cr sr) &quot;client_write&quot;)))
      (load authstor (cat &quot;server store&quot; s u cookie))
      (send (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    (non-orig ppk)
    (facts (neq u s))
    (gen-st (cat &quot;server store&quot; s u cookie)))
  (defgenrule neqRl_indx
    (forall ((x indx)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_strd
    (forall ((x strd)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_mesg
    (forall ((x mesg)) (implies (fact neq x x) (false))))
  (defgenrule scissorsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (leads-to z0 i0 z2 i2))
        (and (= z1 z2) (= i1 i2)))))
  (defgenrule cakeRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (leads-to z0 i0 z1 i1)
          (leads-to z0 i0 z2 i2) (prec z1 i1 z2 i2)) (false))))
  (defgenrule no-interruption
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (leads-to z0 i0 z2 i2) (trans z1 i1)
          (same-locn z0 i0 z1 i1) (prec z0 i0 z1 i1) (prec z1 i1 z2 i2))
        (false))))
  (defgenrule shearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (same-locn z0 i0 z2 i2)
          (prec z0 i0 z2 i2))
        (or (and (= z1 z2) (= i1 i2)) (prec z1 i1 z2 i2)))))
  (defgenrule invShearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (same-locn z0 i0 z1 i1)
          (leads-to z1 i1 z2 i2) (prec z0 i0 z2 i2))
        (or (and (= z0 z1) (= i0 i1)) (prec z0 i0 z1 i1)))))
  (defgenrule fact-servera-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p &quot;servera&quot; z (idx 5)) (p &quot;servera&quot; &quot;s&quot; z s)
          (p &quot;servera&quot; &quot;u&quot; z u)) (fact neq u s))))
  (defgenrule fact-serverr-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p &quot;serverr&quot; z (idx 6)) (p &quot;serverr&quot; &quot;s&quot; z s)
          (p &quot;serverr&quot; &quot;u&quot; z u)) (fact neq u s))))
  (defgenrule trRl_clienta-at-7
    (forall ((z strd))
      (implies (p &quot;clienta&quot; z (idx 8)) (trans z (idx 7)))))
  (defgenrule trRl_clienta-at-6
    (forall ((z strd))
      (implies (p &quot;clienta&quot; z (idx 8)) (trans z (idx 6)))))
  (defgenrule trRl_servera-at-7
    (forall ((z strd))
      (implies (p &quot;servera&quot; z (idx 8)) (trans z (idx 7)))))
  (defgenrule trRl_servera-at-6
    (forall ((z strd))
      (implies (p &quot;servera&quot; z (idx 8)) (trans z (idx 6)))))
  (defgenrule gen-st-clientr-0
    (forall ((z strd) (cookie mesg) (s u name))
      (implies
        (and (p &quot;clientr&quot; z (idx 5)) (p &quot;clientr&quot; &quot;cookie&quot; z cookie)
          (p &quot;clientr&quot; &quot;s&quot; z s) (p &quot;clientr&quot; &quot;u&quot; z u))
        (gen-st (cat &quot;client store&quot; u s cookie)))))
  (defgenrule gen-st-serverr-0
    (forall ((z strd) (cookie data) (u s name))
      (implies
        (and (p &quot;serverr&quot; z (idx 6)) (p &quot;serverr&quot; &quot;cookie&quot; z cookie)
          (p &quot;serverr&quot; &quot;u&quot; z u) (p &quot;serverr&quot; &quot;s&quot; z s))
        (gen-st (cat &quot;server store&quot; s u cookie)))))
  (lang (random32 atom) (random48 atom) (password atom) (httpreq atom)
    (httpdata atom)))</pre>

<p id="k96">Item <a href="#t96">96</a>, Child: <a href="#k97">97</a>.</p>

<div>
 <svg
  class='diagram' width='79.920pt' height='754.920pt'
  xmlns='http://www.w3.org/2000/svg' version='1.1'
  viewBox='0 0 79.920 754.920' font-size='12.000'>
  <defs>
   <marker
    id='arrow' orient='auto' markerWidth='5' markerHeight='10' refX='5'
    refY='5'>
    <path
     d='M 0 0 5 5 0 10'
     style='stroke-width: 2; fill: none; stroke: black;'/></marker>
   </defs>
  <line
   x1='39.960' y1='114.960' x2='39.960' y2='714.960'
   style='stroke-width: 0.960; stroke: gray;'/>
  <g>
   <title>(enc (enc cookie (hash ppk (hash pms cr sr))) request (hash (hash pms cr sr) &quot;client_write&quot;))</title>
   <circle style='fill: blue;' cx='39.960' cy='714.960' r='6.000'/></g>
  <g>
   <title>(ch-msg authstor (cat pt-0 &quot;server store&quot; s u cookie))</title>
   <circle style='fill: gray;' cx='39.960' cy='639.960' r='6.000'/></g>
  <g><title>(ch-msg authstor (cat pt any))</title>
   <circle style='fill: gray;' cx='39.960' cy='564.960' r='6.000'/></g>
  <g>
   <title>(enc &quot;login-successful&quot; (enc cookie (hash ppk (hash pms cr sr))) (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle cx='39.960' cy='489.960' r='6.000'/></g>
  <g>
   <title>(enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;))</title>
   <circle style='fill: blue;' cx='39.960' cy='414.960' r='6.000'/></g>
  <g>
   <title>(enc (hash pms &quot;server finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))) (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle cx='39.960' cy='339.960' r='6.000'/></g>
  <g>
   <title>(cat (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))</title>
   <circle style='fill: blue;' cx='39.960' cy='264.960' r='6.000'/></g>
  <g><title>(cat sr s spk (enc (hash s spk) (privk ca)))</title>
   <circle cx='39.960' cy='189.960' r='6.000'/></g>
  <g><title>cr</title>
   <circle style='fill: blue;' cx='39.960' cy='114.960' r='6.000'/></g>
  <g>
   <title>((any any) (cookie cookie) (request request) (p p) (cr cr) (sr sr) (pms pms) (ppk ppk) (spk spk) (u u) (s s) (ca ca) (authstor authstor))</title>
   <text
    x='39.960' y='77.460' style='text-anchor: middle;'>servera</text>
   </g>
  <text x='39.960' y='39.960' style='text-anchor: middle;'>ca 96</text>
  </svg></div>

<pre>(defskeleton ca
  (vars (any mesg) (cookie data) (request httpreq) (p password)
    (cr sr random32) (pms random48) (ppk skey) (spk akey) (s ca u name)
    (pt pt-0 pval) (authstor locn))
  (defstrand servera 9 (any any) (cookie cookie) (request request) (p p)
    (cr cr) (sr sr) (pms pms) (ppk ppk) (spk spk) (u u) (s s) (ca ca)
    (authstor authstor))
  (non-orig ppk (invk spk) (privk ca))
  (uniq-orig cookie cr sr pms)
  (traces
    ((recv cr) (send (cat sr s spk (enc (hash s spk) (privk ca))))
      (recv
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (send
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (recv (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (send
        (enc &quot;login-successful&quot; (enc cookie (hash ppk (hash pms cr sr)))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (load authstor (cat pt any))
      (stor authstor (cat pt-0 &quot;server store&quot; s u cookie))
      (recv
        (enc (enc cookie (hash ppk (hash pms cr sr))) request
          (hash (hash pms cr sr) &quot;client_write&quot;)))))
  (label 96)
  (realized)
  (origs (pt-0 (0 7)) (sr (0 1)) (cookie (0 5)))
  (comment &quot;Not closed under rules&quot;))</pre>

<p id="k97">Item <a href="#t96">97</a>, Parent: <a href="#k96">96</a>.</p>

<div>
 <svg
  class='diagram' width='79.920pt' height='754.920pt'
  xmlns='http://www.w3.org/2000/svg' version='1.1'
  viewBox='0 0 79.920 754.920' font-size='12.000'>
  <defs>
   <marker
    id='arrow' orient='auto' markerWidth='5' markerHeight='10' refX='5'
    refY='5'>
    <path
     d='M 0 0 5 5 0 10'
     style='stroke-width: 2; fill: none; stroke: black;'/></marker>
   </defs>
  <line
   x1='39.960' y1='114.960' x2='39.960' y2='714.960'
   style='stroke-width: 0.960; stroke: gray;'/>
  <g>
   <title>(enc (enc cookie (hash ppk (hash pms cr sr))) request (hash (hash pms cr sr) &quot;client_write&quot;))</title>
   <circle style='fill: blue;' cx='39.960' cy='714.960' r='6.000'/></g>
  <g>
   <title>(ch-msg authstor (cat pt-0 &quot;server store&quot; s u cookie))</title>
   <circle style='fill: gray;' cx='39.960' cy='639.960' r='6.000'/></g>
  <g><title>(ch-msg authstor (cat pt any))</title>
   <circle style='fill: gray;' cx='39.960' cy='564.960' r='6.000'/></g>
  <g>
   <title>(enc &quot;login-successful&quot; (enc cookie (hash ppk (hash pms cr sr))) (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle cx='39.960' cy='489.960' r='6.000'/></g>
  <g>
   <title>(enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;))</title>
   <circle style='fill: blue;' cx='39.960' cy='414.960' r='6.000'/></g>
  <g>
   <title>(enc (hash pms &quot;server finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))) (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle cx='39.960' cy='339.960' r='6.000'/></g>
  <g>
   <title>(cat (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))</title>
   <circle style='fill: blue;' cx='39.960' cy='264.960' r='6.000'/></g>
  <g><title>(cat sr s spk (enc (hash s spk) (privk ca)))</title>
   <circle cx='39.960' cy='189.960' r='6.000'/></g>
  <g><title>cr</title>
   <circle style='fill: blue;' cx='39.960' cy='114.960' r='6.000'/></g>
  <g>
   <title>((any any) (cookie cookie) (request request) (p p) (cr cr) (sr sr) (pms pms) (ppk ppk) (spk spk) (u u) (s s) (ca ca) (authstor authstor))</title>
   <text
    x='39.960' y='77.460' style='text-anchor: middle;'>servera</text>
   </g>
  <text x='39.960' y='39.960' style='text-anchor: middle;'>ca 97</text>
  </svg></div>

<pre>(defskeleton ca
  (vars (any mesg) (cookie data) (request httpreq) (p password)
    (cr sr random32) (pms random48) (ppk skey) (spk akey) (s ca u name)
    (pt pt-0 pval) (authstor locn))
  (defstrand servera 9 (any any) (cookie cookie) (request request) (p p)
    (cr cr) (sr sr) (pms pms) (ppk ppk) (spk spk) (u u) (s s) (ca ca)
    (authstor authstor))
  (non-orig ppk (invk spk) (privk ca))
  (uniq-orig cookie cr sr pms)
  (facts (neq u s))
  (rule fact-servera-neq0 trRl_servera-at-6 trRl_servera-at-7)
  (traces
    ((recv cr) (send (cat sr s spk (enc (hash s spk) (privk ca))))
      (recv
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (send
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (recv (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (send
        (enc &quot;login-successful&quot; (enc cookie (hash ppk (hash pms cr sr)))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (load authstor (cat pt any))
      (stor authstor (cat pt-0 &quot;server store&quot; s u cookie))
      (recv
        (enc (enc cookie (hash ppk (hash pms cr sr))) request
          (hash (hash pms cr sr) &quot;client_write&quot;)))))
  (label 97)
  (parent 96)
  (realized)
  (shape)
  (maps
    ((0)
      ((s s) (ca ca) (spk spk) (cr cr) (sr sr) (pms pms) (cookie cookie)
        (u u) (p p) (ppk ppk) (any any) (authstor authstor)
        (request request))))
  (origs (pt-0 (0 7)) (sr (0 1)) (cookie (0 5))))</pre>

<p id="t98">Tree <a href="#top">98</a>, POV <a href="#k98">98</a>.</p>

<div>
 <svg
  class='diagram' width='79.920pt' height='79.920pt'
  xmlns='http://www.w3.org/2000/svg' version='1.1'
  viewBox='0 0 79.920 79.920' font-size='12.000'>
  <text
   x='39.960' y='26.040' style='text-anchor: middle; fill: black;'
   onclick='window.open(&quot;#k98&quot;, &quot;_self&quot;)'>98</text>
  </svg></div>

<pre>(defprotocol ca basic
  (defrole clienta
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (p password) (cookie any mesg) (cookiestor locn) (request httpreq)
      (response httpdata))
    (trace (send cr) (recv (cat sr s spk (enc (hash s spk) (privk ca))))
      (send
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (recv
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (send (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv
        (enc &quot;login-successful&quot; cookie
          (hash (hash pms cr sr) &quot;server_write&quot;))) (load cookiestor any)
      (stor cookiestor (cat &quot;client store&quot; u s cookie))
      (send (enc cookie request (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv (enc response (hash (hash pms cr sr) &quot;server_write&quot;)))))
  (defrole clientr
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (cookie mesg) (cookiestor locn) (request httpreq)
      (response httpdata))
    (trace (send cr) (recv (cat sr s spk (enc (hash s spk) (privk ca))))
      (send
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (recv
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (load cookiestor (cat &quot;client store&quot; u s cookie))
      (send (enc cookie request (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    (gen-st (cat &quot;client store&quot; u s cookie)))
  (defrole servera
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (p password) (cookie data) (ppk skey) (any mesg) (authstor locn)
      (request httpreq) (response httpdata))
    (trace (recv cr) (send (cat sr s spk (enc (hash s spk) (privk ca))))
      (recv
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (send
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (recv (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (send
        (enc &quot;login-successful&quot; (enc cookie (hash ppk (hash pms cr sr)))
          (hash (hash pms cr sr) &quot;server_write&quot;))) (load authstor any)
      (stor authstor (cat &quot;server store&quot; s u cookie))
      (recv
        (enc (enc cookie (hash ppk (hash pms cr sr))) request
          (hash (hash pms cr sr) &quot;client_write&quot;)))
      (send (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    (non-orig ppk)
    (uniq-orig cookie)
    (facts (neq u s)))
  (defrole serverr
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (cookie data) (ppk skey) (authstor locn) (request httpreq)
      (response httpdata))
    (trace (recv cr) (send (cat sr s spk (enc (hash s spk) (privk ca))))
      (recv
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (send
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (recv
        (enc (enc cookie (hash ppk (hash pms cr sr))) request
          (hash (hash pms cr sr) &quot;client_write&quot;)))
      (load authstor (cat &quot;server store&quot; s u cookie))
      (send (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    (non-orig ppk)
    (facts (neq u s))
    (gen-st (cat &quot;server store&quot; s u cookie)))
  (defgenrule neqRl_indx
    (forall ((x indx)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_strd
    (forall ((x strd)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_mesg
    (forall ((x mesg)) (implies (fact neq x x) (false))))
  (defgenrule scissorsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (leads-to z0 i0 z2 i2))
        (and (= z1 z2) (= i1 i2)))))
  (defgenrule cakeRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (leads-to z0 i0 z1 i1)
          (leads-to z0 i0 z2 i2) (prec z1 i1 z2 i2)) (false))))
  (defgenrule no-interruption
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (leads-to z0 i0 z2 i2) (trans z1 i1)
          (same-locn z0 i0 z1 i1) (prec z0 i0 z1 i1) (prec z1 i1 z2 i2))
        (false))))
  (defgenrule shearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (same-locn z0 i0 z2 i2)
          (prec z0 i0 z2 i2))
        (or (and (= z1 z2) (= i1 i2)) (prec z1 i1 z2 i2)))))
  (defgenrule invShearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (same-locn z0 i0 z1 i1)
          (leads-to z1 i1 z2 i2) (prec z0 i0 z2 i2))
        (or (and (= z0 z1) (= i0 i1)) (prec z0 i0 z1 i1)))))
  (defgenrule fact-servera-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p &quot;servera&quot; z (idx 5)) (p &quot;servera&quot; &quot;s&quot; z s)
          (p &quot;servera&quot; &quot;u&quot; z u)) (fact neq u s))))
  (defgenrule fact-serverr-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p &quot;serverr&quot; z (idx 6)) (p &quot;serverr&quot; &quot;s&quot; z s)
          (p &quot;serverr&quot; &quot;u&quot; z u)) (fact neq u s))))
  (defgenrule trRl_clienta-at-7
    (forall ((z strd))
      (implies (p &quot;clienta&quot; z (idx 8)) (trans z (idx 7)))))
  (defgenrule trRl_clienta-at-6
    (forall ((z strd))
      (implies (p &quot;clienta&quot; z (idx 8)) (trans z (idx 6)))))
  (defgenrule trRl_servera-at-7
    (forall ((z strd))
      (implies (p &quot;servera&quot; z (idx 8)) (trans z (idx 7)))))
  (defgenrule trRl_servera-at-6
    (forall ((z strd))
      (implies (p &quot;servera&quot; z (idx 8)) (trans z (idx 6)))))
  (defgenrule gen-st-clientr-0
    (forall ((z strd) (cookie mesg) (s u name))
      (implies
        (and (p &quot;clientr&quot; z (idx 5)) (p &quot;clientr&quot; &quot;cookie&quot; z cookie)
          (p &quot;clientr&quot; &quot;s&quot; z s) (p &quot;clientr&quot; &quot;u&quot; z u))
        (gen-st (cat &quot;client store&quot; u s cookie)))))
  (defgenrule gen-st-serverr-0
    (forall ((z strd) (cookie data) (u s name))
      (implies
        (and (p &quot;serverr&quot; z (idx 6)) (p &quot;serverr&quot; &quot;cookie&quot; z cookie)
          (p &quot;serverr&quot; &quot;u&quot; z u) (p &quot;serverr&quot; &quot;s&quot; z s))
        (gen-st (cat &quot;server store&quot; s u cookie)))))
  (lang (random32 atom) (random48 atom) (password atom) (httpreq atom)
    (httpdata atom)))</pre>

<p id="k98">Item <a href="#t98">98</a>.</p>

<div>
 <svg
  class='diagram' width='79.920pt' height='529.920pt'
  xmlns='http://www.w3.org/2000/svg' version='1.1'
  viewBox='0 0 79.920 529.920' font-size='12.000'>
  <defs>
   <marker
    id='arrow' orient='auto' markerWidth='5' markerHeight='10' refX='5'
    refY='5'>
    <path
     d='M 0 0 5 5 0 10'
     style='stroke-width: 2; fill: none; stroke: black;'/></marker>
   </defs>
  <line
   x1='39.960' y1='114.960' x2='39.960' y2='489.960'
   style='stroke-width: 0.960; stroke: gray;'/>
  <g>
   <title>(ch-msg authstor (cat pt &quot;server store&quot; s u cookie))</title>
   <circle style='fill: gray;' cx='39.960' cy='489.960' r='6.000'/></g>
  <g>
   <title>(enc (enc cookie (hash ppk (hash pms cr sr))) request (hash (hash pms cr sr) &quot;client_write&quot;))</title>
   <circle style='fill: red;' cx='39.960' cy='414.960' r='6.000'/></g>
  <g>
   <title>(enc (hash pms &quot;server finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))) (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle cx='39.960' cy='339.960' r='6.000'/></g>
  <g>
   <title>(cat (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))</title>
   <circle style='fill: blue;' cx='39.960' cy='264.960' r='6.000'/></g>
  <g><title>(cat sr s spk (enc (hash s spk) (privk ca)))</title>
   <circle cx='39.960' cy='189.960' r='6.000'/></g>
  <g><title>cr</title>
   <circle style='fill: blue;' cx='39.960' cy='114.960' r='6.000'/></g>
  <g>
   <title>((cookie cookie) (request request) (cr cr) (sr sr) (pms pms) (ppk ppk) (spk spk) (u u) (s s) (ca ca) (authstor authstor))</title>
   <text
    x='39.960' y='77.460' style='text-anchor: middle;'>serverr</text>
   </g>
  <text x='39.960' y='39.960' style='text-anchor: middle;'>ca 98</text>
  </svg></div>

<pre>(defskeleton ca
  (vars (cookie data) (request httpreq) (cr sr random32) (pms random48)
    (ppk skey) (spk akey) (s ca u name) (pt pval) (authstor locn))
  (defstrand serverr 6 (cookie cookie) (request request) (cr cr) (sr sr)
    (pms pms) (ppk ppk) (spk spk) (u u) (s s) (ca ca)
    (authstor authstor))
  (non-orig ppk (invk spk) (privk ca))
  (uniq-orig sr)
  (traces
    ((recv cr) (send (cat sr s spk (enc (hash s spk) (privk ca))))
      (recv
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (send
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (recv
        (enc (enc cookie (hash ppk (hash pms cr sr))) request
          (hash (hash pms cr sr) &quot;client_write&quot;)))
      (load authstor (cat pt &quot;server store&quot; s u cookie))))
  (label 98)
  (unrealized (0 4))
  (origs (sr (0 1)))
  (comment &quot;Not closed under rules&quot;))</pre>

<p id="t101">Tree <a href="#top">101</a>, POV <a href="#k101">101</a>.</p>

<div>
 <svg
  class='diagram' width='79.920pt' height='79.920pt'
  xmlns='http://www.w3.org/2000/svg' version='1.1'
  viewBox='0 0 79.920 79.920' font-size='12.000'>
  <text
   x='39.960' y='26.040' style='text-anchor: middle; fill: black;'
   onclick='window.open(&quot;#k101&quot;, &quot;_self&quot;)'>101</text>
  </svg></div>

<pre>(defprotocol ca basic
  (defrole clienta
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (p password) (cookie any mesg) (cookiestor locn) (request httpreq)
      (response httpdata))
    (trace (send cr) (recv (cat sr s spk (enc (hash s spk) (privk ca))))
      (send
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (recv
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (send (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv
        (enc &quot;login-successful&quot; cookie
          (hash (hash pms cr sr) &quot;server_write&quot;))) (load cookiestor any)
      (stor cookiestor (cat &quot;client store&quot; u s cookie))
      (send (enc cookie request (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv (enc response (hash (hash pms cr sr) &quot;server_write&quot;)))))
  (defrole clientr
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (cookie mesg) (cookiestor locn) (request httpreq)
      (response httpdata))
    (trace (send cr) (recv (cat sr s spk (enc (hash s spk) (privk ca))))
      (send
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (recv
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (load cookiestor (cat &quot;client store&quot; u s cookie))
      (send (enc cookie request (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    (gen-st (cat &quot;client store&quot; u s cookie)))
  (defrole servera
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (p password) (cookie data) (ppk skey) (any mesg) (authstor locn)
      (request httpreq) (response httpdata))
    (trace (recv cr) (send (cat sr s spk (enc (hash s spk) (privk ca))))
      (recv
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (send
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (recv (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (send
        (enc &quot;login-successful&quot; (enc cookie (hash ppk (hash pms cr sr)))
          (hash (hash pms cr sr) &quot;server_write&quot;))) (load authstor any)
      (stor authstor (cat &quot;server store&quot; s u cookie))
      (recv
        (enc (enc cookie (hash ppk (hash pms cr sr))) request
          (hash (hash pms cr sr) &quot;client_write&quot;)))
      (send (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    (non-orig ppk)
    (uniq-orig cookie)
    (facts (neq u s)))
  (defrole serverr
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (cookie data) (ppk skey) (authstor locn) (request httpreq)
      (response httpdata))
    (trace (recv cr) (send (cat sr s spk (enc (hash s spk) (privk ca))))
      (recv
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (send
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (recv
        (enc (enc cookie (hash ppk (hash pms cr sr))) request
          (hash (hash pms cr sr) &quot;client_write&quot;)))
      (load authstor (cat &quot;server store&quot; s u cookie))
      (send (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    (non-orig ppk)
    (facts (neq u s))
    (gen-st (cat &quot;server store&quot; s u cookie)))
  (defgenrule neqRl_indx
    (forall ((x indx)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_strd
    (forall ((x strd)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_mesg
    (forall ((x mesg)) (implies (fact neq x x) (false))))
  (defgenrule scissorsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (leads-to z0 i0 z2 i2))
        (and (= z1 z2) (= i1 i2)))))
  (defgenrule cakeRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (leads-to z0 i0 z1 i1)
          (leads-to z0 i0 z2 i2) (prec z1 i1 z2 i2)) (false))))
  (defgenrule no-interruption
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (leads-to z0 i0 z2 i2) (trans z1 i1)
          (same-locn z0 i0 z1 i1) (prec z0 i0 z1 i1) (prec z1 i1 z2 i2))
        (false))))
  (defgenrule shearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (same-locn z0 i0 z2 i2)
          (prec z0 i0 z2 i2))
        (or (and (= z1 z2) (= i1 i2)) (prec z1 i1 z2 i2)))))
  (defgenrule invShearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (same-locn z0 i0 z1 i1)
          (leads-to z1 i1 z2 i2) (prec z0 i0 z2 i2))
        (or (and (= z0 z1) (= i0 i1)) (prec z0 i0 z1 i1)))))
  (defgenrule fact-servera-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p &quot;servera&quot; z (idx 5)) (p &quot;servera&quot; &quot;s&quot; z s)
          (p &quot;servera&quot; &quot;u&quot; z u)) (fact neq u s))))
  (defgenrule fact-serverr-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p &quot;serverr&quot; z (idx 6)) (p &quot;serverr&quot; &quot;s&quot; z s)
          (p &quot;serverr&quot; &quot;u&quot; z u)) (fact neq u s))))
  (defgenrule trRl_clienta-at-7
    (forall ((z strd))
      (implies (p &quot;clienta&quot; z (idx 8)) (trans z (idx 7)))))
  (defgenrule trRl_clienta-at-6
    (forall ((z strd))
      (implies (p &quot;clienta&quot; z (idx 8)) (trans z (idx 6)))))
  (defgenrule trRl_servera-at-7
    (forall ((z strd))
      (implies (p &quot;servera&quot; z (idx 8)) (trans z (idx 7)))))
  (defgenrule trRl_servera-at-6
    (forall ((z strd))
      (implies (p &quot;servera&quot; z (idx 8)) (trans z (idx 6)))))
  (defgenrule gen-st-clientr-0
    (forall ((z strd) (cookie mesg) (s u name))
      (implies
        (and (p &quot;clientr&quot; z (idx 5)) (p &quot;clientr&quot; &quot;cookie&quot; z cookie)
          (p &quot;clientr&quot; &quot;s&quot; z s) (p &quot;clientr&quot; &quot;u&quot; z u))
        (gen-st (cat &quot;client store&quot; u s cookie)))))
  (defgenrule gen-st-serverr-0
    (forall ((z strd) (cookie data) (u s name))
      (implies
        (and (p &quot;serverr&quot; z (idx 6)) (p &quot;serverr&quot; &quot;cookie&quot; z cookie)
          (p &quot;serverr&quot; &quot;u&quot; z u) (p &quot;serverr&quot; &quot;s&quot; z s))
        (gen-st (cat &quot;server store&quot; s u cookie)))))
  (lang (random32 atom) (random48 atom) (password atom) (httpreq atom)
    (httpdata atom)))</pre>

<p id="k101">Item <a href="#t101">101</a>.</p>

<div>
 <svg
  class='diagram' width='179.880pt' height='829.920pt'
  xmlns='http://www.w3.org/2000/svg' version='1.1'
  viewBox='0 0 179.880 829.920' font-size='12.000'>
  <defs>
   <marker
    id='arrow' orient='auto' markerWidth='5' markerHeight='10' refX='5'
    refY='5'>
    <path
     d='M 0 0 5 5 0 10'
     style='stroke-width: 2; fill: none; stroke: black;'/></marker>
   </defs>
  <line
   x1='139.920' y1='114.960' x2='139.920' y2='789.960'
   style='stroke-width: 0.960; stroke: gray;'/>
  <line
   x1='39.960' y1='114.960' x2='39.960' y2='189.960'
   style='stroke-width: 0.960; stroke: gray;'/>
  <g>
   <title>(enc response (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle style='fill: red;' cx='139.920' cy='789.960' r='6.000'/></g>
  <g>
   <title>(enc cookie request (hash (hash pms cr sr) &quot;client_write&quot;))</title>
   <circle cx='139.920' cy='714.960' r='6.000'/></g>
  <g>
   <title>(ch-msg cookiestor (cat pt-0 &quot;client store&quot; u s cookie))</title>
   <circle style='fill: gray;' cx='139.920' cy='639.960' r='6.000'/></g>
  <g><title>(ch-msg cookiestor (cat pt any))</title>
   <circle style='fill: gray;' cx='139.920' cy='564.960' r='6.000'/></g>
  <g>
   <title>(enc &quot;login-successful&quot; cookie (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle style='fill: red;' cx='139.920' cy='489.960' r='6.000'/></g>
  <g>
   <title>(enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;))</title>
   <circle cx='139.920' cy='414.960' r='6.000'/></g>
  <g>
   <title>(enc (hash pms &quot;server finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))) (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle style='fill: red;' cx='139.920' cy='339.960' r='6.000'/></g>
  <g>
   <title>(cat (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))</title>
   <circle cx='139.920' cy='264.960' r='6.000'/></g>
  <g><title>(cat sr s spk (enc (hash s spk) (privk ca)))</title>
   <circle style='fill: red;' cx='139.920' cy='189.960' r='6.000'/></g>
  <g><title>cr</title><circle cx='139.920' cy='114.960' r='6.000'/></g>
  <g><title>cookie</title><circle cx='39.960' cy='189.960' r='6.000'/>
   </g>
  <g><title>cookie</title>
   <circle style='fill: blue;' cx='39.960' cy='114.960' r='6.000'/></g>
  <g>
   <title>((cookie cookie) (any any) (response response) (request request) (p p) (cr cr) (sr sr) (pms pms) (spk spk) (u u) (s s) (ca ca) (cookiestor cookiestor))</title>
   <text
    x='139.920' y='77.460' style='text-anchor: middle;'>clienta</text>
   </g>
  <text x='89.940' y='39.960' style='text-anchor: middle;'>ca 101</text>
  </svg></div>

<pre>(defskeleton ca
  (vars (any mesg) (cookie data) (response httpdata) (request httpreq)
    (p password) (cr sr random32) (pms random48) (spk akey)
    (u s ca name) (pt pt-0 pval) (cookiestor locn))
  (deflistener cookie)
  (defstrand clienta 10 (cookie cookie) (any any) (response response)
    (request request) (p p) (cr cr) (sr sr) (pms pms) (spk spk) (u u)
    (s s) (ca ca) (cookiestor cookiestor))
  (non-orig (invk spk) (privk ca))
  (pen-non-orig p)
  (uniq-orig cr sr pms)
  (goals
    (forall
      ((cookie data) (p password) (cr sr random32) (pms random48)
        (u s ca name) (spk akey) (z z-0 strd))
      (implies
        (and (p &quot;clienta&quot; z 10) (p &quot;&quot; z-0 2)
          (p &quot;clienta&quot; &quot;cookie&quot; z cookie) (p &quot;clienta&quot; &quot;p&quot; z p)
          (p &quot;clienta&quot; &quot;spk&quot; z spk) (p &quot;clienta&quot; &quot;cr&quot; z cr)
          (p &quot;clienta&quot; &quot;sr&quot; z sr) (p &quot;clienta&quot; &quot;pms&quot; z pms)
          (p &quot;clienta&quot; &quot;u&quot; z u) (p &quot;clienta&quot; &quot;s&quot; z s)
          (p &quot;clienta&quot; &quot;ca&quot; z ca) (p &quot;&quot; &quot;x&quot; z-0 cookie) (non (invk spk))
          (non (privk ca)) (pnon p) (uniq sr) (uniq-at cr z 0)
          (uniq-at pms z 2)) (false))))
  (traces ((recv cookie) (send cookie))
    ((send cr) (recv (cat sr s spk (enc (hash s spk) (privk ca))))
      (send
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (recv
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (send (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv
        (enc &quot;login-successful&quot; cookie
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (load cookiestor (cat pt any))
      (stor cookiestor (cat pt-0 &quot;client store&quot; u s cookie))
      (send (enc cookie request (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv (enc response (hash (hash pms cr sr) &quot;server_write&quot;)))))
  (label 101)
  (unrealized (1 1) (1 3) (1 5) (1 9))
  (origs (pt-0 (1 7)) (cr (1 0)) (pms (1 2)))
  (comment &quot;Not closed under rules&quot;))</pre>

<p id="t115">Tree <a href="#top">115</a>, POV <a href="#k115">115</a>.</p>

<div>
 <svg
  class='diagram' width='129.840pt' height='79.920pt'
  xmlns='http://www.w3.org/2000/svg' version='1.1'
  viewBox='0 0 129.840 79.920' font-size='12.000'>
  <text
   x='89.880' y='26.040'
   style='font-weight: bold; text-anchor: middle; fill: blue;'
   onclick='window.open(&quot;#k141&quot;, &quot;_self&quot;)'>141</text>
  <line
   x1='39.960' y1='39.960' x2='89.880' y2='39.960'
   style='stroke-width: 0.960; stroke: gray;'/>
  <text
   x='39.960' y='26.040' style='text-anchor: middle; fill: black;'
   onclick='window.open(&quot;#k115&quot;, &quot;_self&quot;)'>115</text>
  </svg></div>

<pre>(defprotocol ca basic
  (defrole clienta
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (p password) (cookie any mesg) (cookiestor locn) (request httpreq)
      (response httpdata))
    (trace (send cr) (recv (cat sr s spk (enc (hash s spk) (privk ca))))
      (send
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (recv
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (send (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv
        (enc &quot;login-successful&quot; cookie
          (hash (hash pms cr sr) &quot;server_write&quot;))) (load cookiestor any)
      (stor cookiestor (cat &quot;client store&quot; u s cookie))
      (send (enc cookie request (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv (enc response (hash (hash pms cr sr) &quot;server_write&quot;)))))
  (defrole clientr
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (cookie mesg) (cookiestor locn) (request httpreq)
      (response httpdata))
    (trace (send cr) (recv (cat sr s spk (enc (hash s spk) (privk ca))))
      (send
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (recv
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (load cookiestor (cat &quot;client store&quot; u s cookie))
      (send (enc cookie request (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    (gen-st (cat &quot;client store&quot; u s cookie)))
  (defrole servera
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (p password) (cookie data) (ppk skey) (any mesg) (authstor locn)
      (request httpreq) (response httpdata))
    (trace (recv cr) (send (cat sr s spk (enc (hash s spk) (privk ca))))
      (recv
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (send
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (recv (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (send
        (enc &quot;login-successful&quot; (enc cookie (hash ppk (hash pms cr sr)))
          (hash (hash pms cr sr) &quot;server_write&quot;))) (load authstor any)
      (stor authstor (cat &quot;server store&quot; s u cookie))
      (recv
        (enc (enc cookie (hash ppk (hash pms cr sr))) request
          (hash (hash pms cr sr) &quot;client_write&quot;)))
      (send (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    (non-orig ppk)
    (uniq-orig cookie)
    (facts (neq u s)))
  (defrole serverr
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (cookie data) (ppk skey) (authstor locn) (request httpreq)
      (response httpdata))
    (trace (recv cr) (send (cat sr s spk (enc (hash s spk) (privk ca))))
      (recv
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (send
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (recv
        (enc (enc cookie (hash ppk (hash pms cr sr))) request
          (hash (hash pms cr sr) &quot;client_write&quot;)))
      (load authstor (cat &quot;server store&quot; s u cookie))
      (send (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    (non-orig ppk)
    (facts (neq u s))
    (gen-st (cat &quot;server store&quot; s u cookie)))
  (defgenrule neqRl_indx
    (forall ((x indx)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_strd
    (forall ((x strd)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_mesg
    (forall ((x mesg)) (implies (fact neq x x) (false))))
  (defgenrule scissorsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (leads-to z0 i0 z2 i2))
        (and (= z1 z2) (= i1 i2)))))
  (defgenrule cakeRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (leads-to z0 i0 z1 i1)
          (leads-to z0 i0 z2 i2) (prec z1 i1 z2 i2)) (false))))
  (defgenrule no-interruption
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (leads-to z0 i0 z2 i2) (trans z1 i1)
          (same-locn z0 i0 z1 i1) (prec z0 i0 z1 i1) (prec z1 i1 z2 i2))
        (false))))
  (defgenrule shearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (same-locn z0 i0 z2 i2)
          (prec z0 i0 z2 i2))
        (or (and (= z1 z2) (= i1 i2)) (prec z1 i1 z2 i2)))))
  (defgenrule invShearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (same-locn z0 i0 z1 i1)
          (leads-to z1 i1 z2 i2) (prec z0 i0 z2 i2))
        (or (and (= z0 z1) (= i0 i1)) (prec z0 i0 z1 i1)))))
  (defgenrule fact-servera-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p &quot;servera&quot; z (idx 5)) (p &quot;servera&quot; &quot;s&quot; z s)
          (p &quot;servera&quot; &quot;u&quot; z u)) (fact neq u s))))
  (defgenrule fact-serverr-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p &quot;serverr&quot; z (idx 6)) (p &quot;serverr&quot; &quot;s&quot; z s)
          (p &quot;serverr&quot; &quot;u&quot; z u)) (fact neq u s))))
  (defgenrule trRl_clienta-at-7
    (forall ((z strd))
      (implies (p &quot;clienta&quot; z (idx 8)) (trans z (idx 7)))))
  (defgenrule trRl_clienta-at-6
    (forall ((z strd))
      (implies (p &quot;clienta&quot; z (idx 8)) (trans z (idx 6)))))
  (defgenrule trRl_servera-at-7
    (forall ((z strd))
      (implies (p &quot;servera&quot; z (idx 8)) (trans z (idx 7)))))
  (defgenrule trRl_servera-at-6
    (forall ((z strd))
      (implies (p &quot;servera&quot; z (idx 8)) (trans z (idx 6)))))
  (defgenrule gen-st-clientr-0
    (forall ((z strd) (cookie mesg) (s u name))
      (implies
        (and (p &quot;clientr&quot; z (idx 5)) (p &quot;clientr&quot; &quot;cookie&quot; z cookie)
          (p &quot;clientr&quot; &quot;s&quot; z s) (p &quot;clientr&quot; &quot;u&quot; z u))
        (gen-st (cat &quot;client store&quot; u s cookie)))))
  (defgenrule gen-st-serverr-0
    (forall ((z strd) (cookie data) (u s name))
      (implies
        (and (p &quot;serverr&quot; z (idx 6)) (p &quot;serverr&quot; &quot;cookie&quot; z cookie)
          (p &quot;serverr&quot; &quot;u&quot; z u) (p &quot;serverr&quot; &quot;s&quot; z s))
        (gen-st (cat &quot;server store&quot; s u cookie)))))
  (lang (random32 atom) (random48 atom) (password atom) (httpreq atom)
    (httpdata atom)))</pre>

<p id="k115">Item <a href="#t115">115</a>, Child: <a href="#k141">141</a>.</p>

<div>
 <svg
  class='diagram' width='79.920pt' height='829.920pt'
  xmlns='http://www.w3.org/2000/svg' version='1.1'
  viewBox='0 0 79.920 829.920' font-size='12.000'>
  <defs>
   <marker
    id='arrow' orient='auto' markerWidth='5' markerHeight='10' refX='5'
    refY='5'>
    <path
     d='M 0 0 5 5 0 10'
     style='stroke-width: 2; fill: none; stroke: black;'/></marker>
   </defs>
  <line
   x1='39.960' y1='114.960' x2='39.960' y2='789.960'
   style='stroke-width: 0.960; stroke: gray;'/>
  <g>
   <title>(enc response (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle style='fill: red;' cx='39.960' cy='789.960' r='6.000'/></g>
  <g>
   <title>(enc (enc cookie (hash ppk (hash pms cr sr))) request (hash (hash pms cr sr) &quot;client_write&quot;))</title>
   <circle cx='39.960' cy='714.960' r='6.000'/></g>
  <g>
   <title>(ch-msg cookiestor (cat pt-0 &quot;client store&quot; u s (enc cookie (hash ppk (hash pms cr sr)))))</title>
   <circle style='fill: gray;' cx='39.960' cy='639.960' r='6.000'/></g>
  <g><title>(ch-msg cookiestor (cat pt any))</title>
   <circle style='fill: gray;' cx='39.960' cy='564.960' r='6.000'/></g>
  <g>
   <title>(enc &quot;login-successful&quot; (enc cookie (hash ppk (hash pms cr sr))) (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle style='fill: red;' cx='39.960' cy='489.960' r='6.000'/></g>
  <g>
   <title>(enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;))</title>
   <circle cx='39.960' cy='414.960' r='6.000'/></g>
  <g>
   <title>(enc (hash pms &quot;server finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))) (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle style='fill: red;' cx='39.960' cy='339.960' r='6.000'/></g>
  <g>
   <title>(cat (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))</title>
   <circle cx='39.960' cy='264.960' r='6.000'/></g>
  <g><title>(cat sr s spk (enc (hash s spk) (privk ca)))</title>
   <circle style='fill: red;' cx='39.960' cy='189.960' r='6.000'/></g>
  <g><title>cr</title><circle cx='39.960' cy='114.960' r='6.000'/></g>
  <g>
   <title>((cookie (enc cookie (hash ppk (hash pms cr sr)))) (any any) (response response) (request request) (p p) (cr cr) (sr sr) (pms pms) (spk spk) (u u) (s s) (ca ca) (cookiestor cookiestor))</title>
   <text
    x='39.960' y='77.460' style='text-anchor: middle;'>clienta</text>
   </g>
  <text x='39.960' y='39.960' style='text-anchor: middle;'>ca 115</text>
  </svg></div>

<pre>(defskeleton ca
  (vars (any mesg) (cookie data) (response httpdata) (request httpreq)
    (p password) (cr sr random32) (pms random48) (ppk skey) (spk akey)
    (u s ca name) (pt pt-0 pval) (cookiestor locn))
  (defstrand clienta 10
    (cookie (enc cookie (hash ppk (hash pms cr sr)))) (any any)
    (response response) (request request) (p p) (cr cr) (sr sr)
    (pms pms) (spk spk) (u u) (s s) (ca ca) (cookiestor cookiestor))
  (non-orig ppk (invk spk) (privk ca))
  (uniq-orig cr sr pms)
  (goals
    (forall
      ((z strd) (cookie data) (u s ca name) (cr sr random32)
        (pms random48) (ppk skey) (spk akey))
      (implies
        (and (p &quot;clienta&quot; z 10)
          (p &quot;clienta&quot; &quot;cookie&quot; z
            (enc cookie (hash ppk (hash pms cr sr))))
          (p &quot;clienta&quot; &quot;u&quot; z u) (p &quot;clienta&quot; &quot;s&quot; z s)
          (p &quot;clienta&quot; &quot;spk&quot; z spk) (p &quot;clienta&quot; &quot;ca&quot; z ca)
          (p &quot;clienta&quot; &quot;cr&quot; z cr) (p &quot;clienta&quot; &quot;sr&quot; z sr)
          (p &quot;clienta&quot; &quot;pms&quot; z pms) (non (privk ca)) (non (invk spk))
          (non ppk) (uniq sr) (uniq-at cr z 0) (uniq-at pms z 2))
        (exists ((z0 strd))
          (and (p &quot;servera&quot; z0 10) (p &quot;servera&quot; &quot;cookie&quot; z0 cookie)
            (p &quot;servera&quot; &quot;u&quot; z0 u) (p &quot;servera&quot; &quot;s&quot; z0 s)
            (p &quot;servera&quot; &quot;spk&quot; z0 spk) (uniq-at cookie z0 5)
            (fact neq u s))))))
  (traces
    ((send cr) (recv (cat sr s spk (enc (hash s spk) (privk ca))))
      (send
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (recv
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (send (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv
        (enc &quot;login-successful&quot; (enc cookie (hash ppk (hash pms cr sr)))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (load cookiestor (cat pt any))
      (stor cookiestor
        (cat pt-0 &quot;client store&quot; u s
          (enc cookie (hash ppk (hash pms cr sr)))))
      (send
        (enc (enc cookie (hash ppk (hash pms cr sr))) request
          (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv (enc response (hash (hash pms cr sr) &quot;server_write&quot;)))))
  (label 115)
  (unrealized (0 1) (0 3) (0 5) (0 9))
  (origs (pt-0 (0 7)) (cr (0 0)) (pms (0 2)))
  (comment &quot;Not closed under rules&quot;))</pre>

<p id="k141">Item <a href="#t115">141</a>, Parent: <a href="#k115">115</a>.</p>

<div>
 <svg
  class='diagram' width='179.880pt' height='829.920pt'
  xmlns='http://www.w3.org/2000/svg' version='1.1'
  viewBox='0 0 179.880 829.920' font-size='12.000'>
  <defs>
   <marker
    id='arrow' orient='auto' markerWidth='5' markerHeight='10' refX='5'
    refY='5'>
    <path
     d='M 0 0 5 5 0 10'
     style='stroke-width: 2; fill: none; stroke: black;'/></marker>
   </defs>
  <line
   x1='139.920' y1='114.960' x2='139.920' y2='789.960'
   style='stroke-width: 0.960; stroke: gray;'/>
  <line
   x1='39.960' y1='114.960' x2='39.960' y2='789.960'
   style='stroke-width: 0.960; stroke: gray;'/>
  <path
   d='M 139.920 789.960 Q 92.940 789.960 45.960 789.960'
   style='stroke-width: 0.960; stroke: black; marker-end: url(#arrow); fill: none;'/>
  <g>
   <title>(enc response (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle cx='139.920' cy='789.960' r='6.000'/></g>
  <g>
   <title>(enc (enc cookie (hash ppk (hash pms cr sr))) request (hash (hash pms cr sr) &quot;client_write&quot;))</title>
   <circle style='fill: blue;' cx='139.920' cy='714.960' r='6.000'/></g>
  <g>
   <title>(ch-msg authstor (cat pt-2 &quot;server store&quot; s u cookie))</title>
   <circle style='fill: gray;' cx='139.920' cy='639.960' r='6.000'/></g>
  <g><title>(ch-msg authstor (cat pt-1 any-0))</title>
   <circle style='fill: gray;' cx='139.920' cy='564.960' r='6.000'/></g>
  <path
   d='M 139.920 489.960 Q 92.940 489.960 45.960 489.960'
   style='stroke-width: 0.960; stroke: black; marker-end: url(#arrow); fill: none;'/>
  <g>
   <title>(enc &quot;login-successful&quot; (enc cookie (hash ppk (hash pms cr sr))) (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle cx='139.920' cy='489.960' r='6.000'/></g>
  <g>
   <title>(enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;))</title>
   <circle style='fill: blue;' cx='139.920' cy='414.960' r='6.000'/></g>
  <path
   d='M 139.920 339.960 Q 92.940 339.960 45.960 339.960'
   style='stroke-width: 0.960; stroke: black; marker-end: url(#arrow); fill: none;'/>
  <g>
   <title>(enc (hash pms &quot;server finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))) (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle cx='139.920' cy='339.960' r='6.000'/></g>
  <g>
   <title>(cat (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))</title>
   <circle style='fill: blue;' cx='139.920' cy='264.960' r='6.000'/></g>
  <path
   d='M 139.920 189.960 Q 92.940 189.960 45.960 189.960'
   style='stroke-width: 0.960; stroke: black; marker-end: url(#arrow); fill: none;'/>
  <g><title>(cat sr s spk (enc (hash s spk) (privk ca)))</title>
   <circle cx='139.920' cy='189.960' r='6.000'/></g>
  <g><title>cr</title>
   <circle style='fill: blue;' cx='139.920' cy='114.960' r='6.000'/></g>
  <g>
   <title>(enc response (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle style='fill: blue;' cx='39.960' cy='789.960' r='6.000'/></g>
  <path
   d='M 39.960 714.960 Q 86.940 714.960 133.920 714.960'
   style='stroke-width: 0.960; stroke: black; marker-end: url(#arrow); fill: none;'/>
  <g>
   <title>(enc (enc cookie (hash ppk (hash pms cr sr))) request (hash (hash pms cr sr) &quot;client_write&quot;))</title>
   <circle cx='39.960' cy='714.960' r='6.000'/></g>
  <g>
   <title>(ch-msg cookiestor (cat pt-0 &quot;client store&quot; u s (enc cookie (hash ppk (hash pms cr sr)))))</title>
   <circle style='fill: gray;' cx='39.960' cy='639.960' r='6.000'/></g>
  <g><title>(ch-msg cookiestor (cat pt any))</title>
   <circle style='fill: gray;' cx='39.960' cy='564.960' r='6.000'/></g>
  <g>
   <title>(enc &quot;login-successful&quot; (enc cookie (hash ppk (hash pms cr sr))) (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle style='fill: blue;' cx='39.960' cy='489.960' r='6.000'/></g>
  <path
   d='M 39.960 414.960 Q 86.940 414.960 133.920 414.960'
   style='stroke-width: 0.960; stroke: black; marker-end: url(#arrow); fill: none;'/>
  <g>
   <title>(enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;))</title>
   <circle cx='39.960' cy='414.960' r='6.000'/></g>
  <g>
   <title>(enc (hash pms &quot;server finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))) (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle style='fill: blue;' cx='39.960' cy='339.960' r='6.000'/></g>
  <path
   d='M 39.960 264.960 Q 86.940 264.960 133.920 264.960'
   style='stroke-width: 0.960; stroke: black; marker-end: url(#arrow); fill: none;'/>
  <g>
   <title>(cat (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))</title>
   <circle cx='39.960' cy='264.960' r='6.000'/></g>
  <g><title>(cat sr s spk (enc (hash s spk) (privk ca)))</title>
   <circle style='fill: blue;' cx='39.960' cy='189.960' r='6.000'/></g>
  <path
   d='M 39.960 114.960 Q 86.940 114.960 133.920 114.960'
   style='stroke-width: 0.960; stroke: black; marker-end: url(#arrow); fill: none;'/>
  <g><title>cr</title><circle cx='39.960' cy='114.960' r='6.000'/></g>
  <g>
   <title>((any any-0) (cookie cookie) (response response) (request request) (p p) (cr cr) (sr sr) (pms pms) (ppk ppk) (spk spk) (u u) (s s) (ca ca) (authstor authstor))</title>
   <text
    x='139.920' y='77.460' style='text-anchor: middle;'>servera</text>
   </g>
  <g>
   <title>((cookie (enc cookie (hash ppk (hash pms cr sr)))) (any any) (response response) (request request) (p p) (cr cr) (sr sr) (pms pms) (spk spk) (u u) (s s) (ca ca) (cookiestor cookiestor))</title>
   <text
    x='39.960' y='77.460' style='text-anchor: middle;'>clienta</text>
   </g>
  <text x='89.940' y='39.960' style='text-anchor: middle;'>ca 141</text>
  </svg></div>

<pre>(defskeleton ca
  (vars (any any-0 mesg) (cookie data) (response httpdata)
    (request httpreq) (p password) (cr sr random32) (pms random48)
    (ppk skey) (spk akey) (u s ca name) (pt pt-0 pt-1 pt-2 pval)
    (cookiestor authstor locn))
  (defstrand clienta 10
    (cookie (enc cookie (hash ppk (hash pms cr sr)))) (any any)
    (response response) (request request) (p p) (cr cr) (sr sr)
    (pms pms) (spk spk) (u u) (s s) (ca ca) (cookiestor cookiestor))
  (defstrand servera 10 (any any-0) (cookie cookie) (response response)
    (request request) (p p) (cr cr) (sr sr) (pms pms) (ppk ppk)
    (spk spk) (u u) (s s) (ca ca) (authstor authstor))
  (precedes ((0 0) (1 0)) ((0 2) (1 2)) ((0 4) (1 4)) ((0 8) (1 8))
    ((1 1) (0 1)) ((1 3) (0 3)) ((1 5) (0 5)) ((1 9) (0 9)))
  (non-orig ppk (invk spk) (privk ca))
  (uniq-orig cookie cr sr pms)
  (facts (neq u s))
  (rule fact-servera-neq0 trRl_clienta-at-6 trRl_clienta-at-7
    trRl_servera-at-6 trRl_servera-at-7)
  (operation encryption-test (displaced 2 0 clienta 9)
    (enc (enc cookie (hash ppk (hash pms cr sr))) request-0
      (hash (hash pms cr sr) &quot;client_write&quot;)) (1 8))
  (traces
    ((send cr) (recv (cat sr s spk (enc (hash s spk) (privk ca))))
      (send
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (recv
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (send (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv
        (enc &quot;login-successful&quot; (enc cookie (hash ppk (hash pms cr sr)))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (load cookiestor (cat pt any))
      (stor cookiestor
        (cat pt-0 &quot;client store&quot; u s
          (enc cookie (hash ppk (hash pms cr sr)))))
      (send
        (enc (enc cookie (hash ppk (hash pms cr sr))) request
          (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    ((recv cr) (send (cat sr s spk (enc (hash s spk) (privk ca))))
      (recv
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (send
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (recv (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (send
        (enc &quot;login-successful&quot; (enc cookie (hash ppk (hash pms cr sr)))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (load authstor (cat pt-1 any-0))
      (stor authstor (cat pt-2 &quot;server store&quot; s u cookie))
      (recv
        (enc (enc cookie (hash ppk (hash pms cr sr))) request
          (hash (hash pms cr sr) &quot;client_write&quot;)))
      (send (enc response (hash (hash pms cr sr) &quot;server_write&quot;)))))
  (label 141)
  (parent 115)
  (realized)
  (shape)
  (satisfies yes)
  (maps
    ((0)
      ((cookie cookie) (u u) (s s) (ca ca) (cr cr) (sr sr) (pms pms)
        (ppk ppk) (spk spk) (p p) (any any) (cookiestor cookiestor)
        (request request) (response response))))
  (origs (pt-0 (0 7)) (cookie (1 5)) (pt-2 (1 7)) (sr (1 1)) (cr (0 0))
    (pms (0 2))))</pre>

<p id="t155">Tree <a href="#top">155</a>, POV <a href="#k155">155</a>.</p>

<div>
 <svg
  class='diagram' width='79.920pt' height='79.920pt'
  xmlns='http://www.w3.org/2000/svg' version='1.1'
  viewBox='0 0 79.920 79.920' font-size='12.000'>
  <text
   x='39.960' y='26.040' style='text-anchor: middle; fill: black;'
   onclick='window.open(&quot;#k155&quot;, &quot;_self&quot;)'>155</text>
  </svg></div>

<pre>(defprotocol ca basic
  (defrole clienta
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (p password) (cookie any mesg) (cookiestor locn) (request httpreq)
      (response httpdata))
    (trace (send cr) (recv (cat sr s spk (enc (hash s spk) (privk ca))))
      (send
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (recv
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (send (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv
        (enc &quot;login-successful&quot; cookie
          (hash (hash pms cr sr) &quot;server_write&quot;))) (load cookiestor any)
      (stor cookiestor (cat &quot;client store&quot; u s cookie))
      (send (enc cookie request (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv (enc response (hash (hash pms cr sr) &quot;server_write&quot;)))))
  (defrole clientr
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (cookie mesg) (cookiestor locn) (request httpreq)
      (response httpdata))
    (trace (send cr) (recv (cat sr s spk (enc (hash s spk) (privk ca))))
      (send
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (recv
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (load cookiestor (cat &quot;client store&quot; u s cookie))
      (send (enc cookie request (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    (gen-st (cat &quot;client store&quot; u s cookie)))
  (defrole servera
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (p password) (cookie data) (ppk skey) (any mesg) (authstor locn)
      (request httpreq) (response httpdata))
    (trace (recv cr) (send (cat sr s spk (enc (hash s spk) (privk ca))))
      (recv
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (send
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (recv (enc &quot;login&quot; u p (hash (hash pms cr sr) &quot;client_write&quot;)))
      (send
        (enc &quot;login-successful&quot; (enc cookie (hash ppk (hash pms cr sr)))
          (hash (hash pms cr sr) &quot;server_write&quot;))) (load authstor any)
      (stor authstor (cat &quot;server store&quot; s u cookie))
      (recv
        (enc (enc cookie (hash ppk (hash pms cr sr))) request
          (hash (hash pms cr sr) &quot;client_write&quot;)))
      (send (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    (non-orig ppk)
    (uniq-orig cookie)
    (facts (neq u s)))
  (defrole serverr
    (vars (u s ca name) (cr sr random32) (spk akey) (pms random48)
      (cookie data) (ppk skey) (authstor locn) (request httpreq)
      (response httpdata))
    (trace (recv cr) (send (cat sr s spk (enc (hash s spk) (privk ca))))
      (recv
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (send
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (recv
        (enc (enc cookie (hash ppk (hash pms cr sr))) request
          (hash (hash pms cr sr) &quot;client_write&quot;)))
      (load authstor (cat &quot;server store&quot; s u cookie))
      (send (enc response (hash (hash pms cr sr) &quot;server_write&quot;))))
    (non-orig ppk)
    (facts (neq u s))
    (gen-st (cat &quot;server store&quot; s u cookie)))
  (defgenrule neqRl_indx
    (forall ((x indx)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_strd
    (forall ((x strd)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_mesg
    (forall ((x mesg)) (implies (fact neq x x) (false))))
  (defgenrule scissorsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (leads-to z0 i0 z2 i2))
        (and (= z1 z2) (= i1 i2)))))
  (defgenrule cakeRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (leads-to z0 i0 z1 i1)
          (leads-to z0 i0 z2 i2) (prec z1 i1 z2 i2)) (false))))
  (defgenrule no-interruption
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (leads-to z0 i0 z2 i2) (trans z1 i1)
          (same-locn z0 i0 z1 i1) (prec z0 i0 z1 i1) (prec z1 i1 z2 i2))
        (false))))
  (defgenrule shearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (trans z2 i2)
          (leads-to z0 i0 z1 i1) (same-locn z0 i0 z2 i2)
          (prec z0 i0 z2 i2))
        (or (and (= z1 z2) (= i1 i2)) (prec z1 i1 z2 i2)))))
  (defgenrule invShearsRule
    (forall ((z0 z1 z2 strd) (i0 i1 i2 indx))
      (implies
        (and (trans z0 i0) (trans z1 i1) (same-locn z0 i0 z1 i1)
          (leads-to z1 i1 z2 i2) (prec z0 i0 z2 i2))
        (or (and (= z0 z1) (= i0 i1)) (prec z0 i0 z1 i1)))))
  (defgenrule fact-servera-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p &quot;servera&quot; z (idx 5)) (p &quot;servera&quot; &quot;s&quot; z s)
          (p &quot;servera&quot; &quot;u&quot; z u)) (fact neq u s))))
  (defgenrule fact-serverr-neq0
    (forall ((z strd) (s u name))
      (implies
        (and (p &quot;serverr&quot; z (idx 6)) (p &quot;serverr&quot; &quot;s&quot; z s)
          (p &quot;serverr&quot; &quot;u&quot; z u)) (fact neq u s))))
  (defgenrule trRl_clienta-at-7
    (forall ((z strd))
      (implies (p &quot;clienta&quot; z (idx 8)) (trans z (idx 7)))))
  (defgenrule trRl_clienta-at-6
    (forall ((z strd))
      (implies (p &quot;clienta&quot; z (idx 8)) (trans z (idx 6)))))
  (defgenrule trRl_servera-at-7
    (forall ((z strd))
      (implies (p &quot;servera&quot; z (idx 8)) (trans z (idx 7)))))
  (defgenrule trRl_servera-at-6
    (forall ((z strd))
      (implies (p &quot;servera&quot; z (idx 8)) (trans z (idx 6)))))
  (defgenrule gen-st-clientr-0
    (forall ((z strd) (cookie mesg) (s u name))
      (implies
        (and (p &quot;clientr&quot; z (idx 5)) (p &quot;clientr&quot; &quot;cookie&quot; z cookie)
          (p &quot;clientr&quot; &quot;s&quot; z s) (p &quot;clientr&quot; &quot;u&quot; z u))
        (gen-st (cat &quot;client store&quot; u s cookie)))))
  (defgenrule gen-st-serverr-0
    (forall ((z strd) (cookie data) (u s name))
      (implies
        (and (p &quot;serverr&quot; z (idx 6)) (p &quot;serverr&quot; &quot;cookie&quot; z cookie)
          (p &quot;serverr&quot; &quot;u&quot; z u) (p &quot;serverr&quot; &quot;s&quot; z s))
        (gen-st (cat &quot;server store&quot; s u cookie)))))
  (lang (random32 atom) (random48 atom) (password atom) (httpreq atom)
    (httpdata atom)))</pre>

<p id="k155">Item <a href="#t155">155</a>.</p>

<div>
 <svg
  class='diagram' width='79.920pt' height='604.920pt'
  xmlns='http://www.w3.org/2000/svg' version='1.1'
  viewBox='0 0 79.920 604.920' font-size='12.000'>
  <defs>
   <marker
    id='arrow' orient='auto' markerWidth='5' markerHeight='10' refX='5'
    refY='5'>
    <path
     d='M 0 0 5 5 0 10'
     style='stroke-width: 2; fill: none; stroke: black;'/></marker>
   </defs>
  <line
   x1='39.960' y1='114.960' x2='39.960' y2='564.960'
   style='stroke-width: 0.960; stroke: gray;'/>
  <g>
   <title>(enc response (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle style='fill: red;' cx='39.960' cy='564.960' r='6.000'/></g>
  <g>
   <title>(enc (enc cookie (hash ppk (hash pms cr sr))) request (hash (hash pms cr sr) &quot;client_write&quot;))</title>
   <circle cx='39.960' cy='489.960' r='6.000'/></g>
  <g>
   <title>(ch-msg cookiestor (cat pt &quot;client store&quot; u s (enc cookie (hash ppk (hash pms cr sr)))))</title>
   <circle style='fill: orange;' cx='39.960' cy='414.960' r='6.000'/>
   </g>
  <g>
   <title>(enc (hash pms &quot;server finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))) (hash (hash pms cr sr) &quot;server_write&quot;))</title>
   <circle style='fill: red;' cx='39.960' cy='339.960' r='6.000'/></g>
  <g>
   <title>(cat (enc pms spk) (enc (hash pms &quot;client finished&quot; (hash cr sr (cat s spk (enc (hash s spk) (privk ca))) (enc pms spk))) (hash (hash pms cr sr) &quot;client_write&quot;)))</title>
   <circle cx='39.960' cy='264.960' r='6.000'/></g>
  <g><title>(cat sr s spk (enc (hash s spk) (privk ca)))</title>
   <circle style='fill: red;' cx='39.960' cy='189.960' r='6.000'/></g>
  <g><title>cr</title><circle cx='39.960' cy='114.960' r='6.000'/></g>
  <g>
   <title>((cookie (enc cookie (hash ppk (hash pms cr sr)))) (response response) (request request) (cr cr) (sr sr) (pms pms) (spk spk) (u u) (s s) (ca ca) (cookiestor cookiestor))</title>
   <text
    x='39.960' y='77.460' style='text-anchor: middle;'>clientr</text>
   </g>
  <text x='39.960' y='39.960' style='text-anchor: middle;'>ca 155</text>
  </svg></div>

<pre>(defskeleton ca
  (vars (cookie data) (response httpdata) (request httpreq)
    (cr sr random32) (pms random48) (ppk skey) (spk akey) (u s ca name)
    (pt pval) (cookiestor locn))
  (defstrand clientr 7 (cookie (enc cookie (hash ppk (hash pms cr sr))))
    (response response) (request request) (cr cr) (sr sr) (pms pms)
    (spk spk) (u u) (s s) (ca ca) (cookiestor cookiestor))
  (non-orig ppk (invk spk) (privk ca))
  (uniq-orig cr sr pms)
  (goals
    (forall
      ((z strd) (cookie data) (u s ca name) (cr sr random32)
        (pms random48) (ppk skey) (spk akey))
      (implies
        (and (p &quot;clientr&quot; z 7)
          (p &quot;clientr&quot; &quot;cookie&quot; z
            (enc cookie (hash ppk (hash pms cr sr))))
          (p &quot;clientr&quot; &quot;u&quot; z u) (p &quot;clientr&quot; &quot;s&quot; z s)
          (p &quot;clientr&quot; &quot;spk&quot; z spk) (p &quot;clientr&quot; &quot;ca&quot; z ca)
          (p &quot;clientr&quot; &quot;cr&quot; z cr) (p &quot;clientr&quot; &quot;sr&quot; z sr)
          (p &quot;clientr&quot; &quot;pms&quot; z pms) (non (privk ca)) (non (invk spk))
          (non ppk) (uniq sr) (uniq-at cr z 0) (uniq-at pms z 2))
        (exists ((z0 strd))
          (and (p &quot;servera&quot; z0 8) (p &quot;servera&quot; &quot;cookie&quot; z0 cookie)
            (p &quot;servera&quot; &quot;u&quot; z0 u) (p &quot;servera&quot; &quot;s&quot; z0 s)
            (p &quot;servera&quot; &quot;s&quot; z0 spk) (uniq-at cookie z0 5)
            (fact neq u s))))))
  (traces
    ((send cr) (recv (cat sr s spk (enc (hash s spk) (privk ca))))
      (send
        (cat (enc pms spk)
          (enc
            (hash pms &quot;client finished&quot;
              (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                (enc pms spk)))
            (hash (hash pms cr sr) &quot;client_write&quot;))))
      (recv
        (enc
          (hash pms &quot;server finished&quot;
            (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
              (enc pms spk)
              (enc
                (hash pms &quot;client finished&quot;
                  (hash cr sr (cat s spk (enc (hash s spk) (privk ca)))
                    (enc pms spk)))
                (hash (hash pms cr sr) &quot;client_write&quot;))))
          (hash (hash pms cr sr) &quot;server_write&quot;)))
      (load cookiestor
        (cat pt &quot;client store&quot; u s
          (enc cookie (hash ppk (hash pms cr sr)))))
      (send
        (enc (enc cookie (hash ppk (hash pms cr sr))) request
          (hash (hash pms cr sr) &quot;client_write&quot;)))
      (recv (enc response (hash (hash pms cr sr) &quot;server_write&quot;)))))
  (label 155)
  (unrealized (0 1) (0 3) (0 4) (0 6))
  (origs (cr (0 0)) (pms (0 2)))
  (comment &quot;Not closed under rules&quot;))</pre>

</body>
</html>
