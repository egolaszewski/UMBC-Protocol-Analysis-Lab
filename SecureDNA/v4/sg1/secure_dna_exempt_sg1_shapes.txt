(comment "CPSA 4.4.5")
(comment "Extracted shapes")

(herald "Secure DNA Query Protocol without Cert. Chaining"
  (comment "This model does not feature any certificate chaining.")
  (algebra diffie-hellman) (limit 50000))

(comment "CPSA 4.4.5")

(comment "All input read from secure_dna_exempt_sg1.scm")

(comment "Step count limited to 50000")

(defprotocol secure-dna-query diffie-hellman
  (defrole synth-client-exempt
    (vars (keyserver-ch database-ch chan)
      (r-s r-s2 r-k r-d t t2 authcode random256)
      (c-id k-id d-id m-root i-root b-id name) (seq exempt blind k rndx)
      (b-s b-k b-d b-bio bundle-data) (resp query-response))
    (trace
      (send keyserver-ch
        (cat r-s "keyserver" k-id
          (cat "Token" c-id (pubk c-id) m-root (pubk m-root) b-s)
          (enc (hash c-id (pubk c-id) m-root (pubk m-root) b-s)
            (privk m-root))))
      (recv keyserver-ch
        (cat t r-k
          (cat (cat "Token" k-id (pubk k-id) i-root (pubk i-root) b-k)
            (enc (hash k-id (pubk k-id) i-root (pubk i-root) b-k)
              (privk i-root)))
          (enc
            (hash "server-mutauth" r-k r-s
              (cat "Token" k-id (pubk k-id) i-root (pubk i-root) b-k)
              (enc (hash k-id (pubk k-id) i-root (pubk i-root) b-k)
                (privk i-root))) (privk k-id))))
      (send keyserver-ch
        (cat t "nSeq"
          (enc
            (hash "client-mutauth" r-k r-s
              (cat "Token" c-id (pubk c-id) m-root (pubk m-root) b-s)
              (enc (hash c-id (pubk c-id) m-root (pubk m-root) b-s)
                (privk m-root))) (privk c-id))))
      (send keyserver-ch (cat t (exp (gen) (mul seq blind))))
      (send keyserver-ch (cat t (exp (gen) (mul exempt blind))))
      (recv keyserver-ch (exp (gen) (mul seq blind k)))
      (recv keyserver-ch (exp (gen) (mul exempt blind k)))
      (send database-ch
        (cat r-s2 "screen"
          (cat "Token" c-id (pubk c-id) m-root (pubk m-root) b-s)
          (enc (hash c-id (pubk c-id) m-root (pubk m-root) b-s)
            (privk m-root))))
      (recv database-ch
        (cat t2 r-d
          (cat (cat "Token" d-id (pubk d-id) i-root (pubk i-root) b-d)
            (enc (hash d-id (pubk d-id) i-root (pubk i-root) b-d)
              (privk i-root)))
          (enc
            (hash "server-mutauth" r-d r-s2
              (cat "Token" d-id (pubk d-id) i-root (pubk i-root) b-d)
              (enc (hash d-id (pubk d-id) i-root (pubk i-root) b-d)
                (privk i-root))) (privk d-id))))
      (send database-ch
        (cat t2 "nSeq"
          (enc
            (hash "client-mutauth" r-d r-s2
              (cat "Token" c-id (pubk c-id) m-root (pubk m-root) b-s)
              (enc (hash c-id (pubk c-id) m-root (pubk m-root) b-s)
                (privk m-root))) (privk c-id))))
      (send database-ch (cat t2 (exp (gen) (mul seq k))))
      (send database-ch
        (cat
          (cat (cat "Token" c-id (pubk c-id) b-id (pubk b-id) b-bio)
            (enc (hash c-id (pubk c-id) b-id (pubk b-id) b-bio)
              (privk b-id))) authcode (exp (gen) (mul exempt k))))
      (recv database-ch resp))
    (pen-non-orig authcode)
    (uniq-orig r-s r-s2)
    (uniq-gen seq exempt blind)
    (absent (exempt (mul seq blind))))
  (defrole key-server-exempt
    (vars (keyserver-ch chan) (r-s r-k t random256)
      (c-id k-id m-root i-root name) (seq exempt blind k rndx)
      (b-s b-k bundle-data))
    (trace
      (recv keyserver-ch
        (cat r-s "keyserver" k-id
          (cat "Token" c-id (pubk c-id) m-root (pubk m-root) b-s)
          (enc (hash c-id (pubk c-id) m-root (pubk m-root) b-s)
            (privk m-root))))
      (send keyserver-ch
        (cat t r-k
          (cat (cat "Token" k-id (pubk k-id) i-root (pubk i-root) b-k)
            (enc (hash k-id (pubk k-id) i-root (pubk i-root) b-k)
              (privk i-root)))
          (enc
            (hash "server-mutauth" r-k r-s
              (cat "Token" k-id (pubk k-id) i-root (pubk i-root) b-k)
              (enc (hash k-id (pubk k-id) i-root (pubk i-root) b-k)
                (privk i-root))) (privk k-id))))
      (recv keyserver-ch
        (cat t "nSeq"
          (enc
            (hash "client-mutauth" r-k r-s
              (cat "Token" c-id (pubk c-id) m-root (pubk m-root) b-s)
              (enc (hash c-id (pubk c-id) m-root (pubk m-root) b-s)
                (privk m-root))) (privk c-id))))
      (recv keyserver-ch (cat t (exp (gen) (mul seq blind))))
      (recv keyserver-ch (cat t (exp (gen) (mul exempt blind))))
      (send keyserver-ch (exp (gen) (mul seq blind k)))
      (send keyserver-ch (exp (gen) (mul exempt blind k))))
    (uniq-orig t)
    (uniq-gen k)
    (absent (k (mul seq blind)) (k (mul exempt blind))))
  (defrole database-exempt
    (vars (database-ch chan) (r-s r-d t authcode random256)
      (c-id d-id m-root i-root b-id name) (resp query-response)
      (signed exemptSigned expt) (b-s b-d b-bio bundle-data))
    (trace
      (recv database-ch
        (cat r-s "screen"
          (cat "Token" c-id (pubk c-id) m-root (pubk m-root) b-s)
          (enc (hash c-id (pubk c-id) m-root (pubk m-root) b-s)
            (privk m-root))))
      (send database-ch
        (cat t r-d
          (cat (cat "Token" d-id (pubk d-id) i-root (pubk i-root) b-d)
            (enc (hash d-id (pubk d-id) i-root (pubk i-root) b-d)
              (privk i-root)))
          (enc
            (hash "server-mutauth" r-d r-s
              (cat "Token" d-id (pubk d-id) i-root (pubk i-root) b-d)
              (enc (hash d-id (pubk d-id) i-root (pubk i-root) b-d)
                (privk i-root))) (privk d-id))))
      (recv database-ch
        (cat t "nSeq"
          (enc
            (hash "client-mutauth" r-d r-s
              (cat "Token" c-id (pubk c-id) m-root (pubk m-root) b-s)
              (enc (hash c-id (pubk c-id) m-root (pubk m-root) b-s)
                (privk m-root))) (privk c-id))))
      (recv database-ch (cat t (exp (gen) signed)))
      (recv database-ch
        (cat
          (cat (cat "Token" c-id (pubk c-id) b-id (pubk b-id) b-bio)
            (enc (hash c-id (pubk c-id) b-id (pubk b-id) b-bio)
              (privk b-id))) authcode (exp (gen) exemptSigned)))
      (send database-ch resp))
    (pen-non-orig authcode)
    (uniq-orig t))
  (defgenrule neqRl_indx
    (forall ((x indx)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_strd
    (forall ((x strd)) (implies (fact neq x x) (false))))
  (defgenrule neqRl_mesg
    (forall ((x mesg)) (implies (fact neq x x) (false))))
  (lang (random256 atom) (query-response atom) (bundle-data atom)))

(defskeleton secure-dna-query
  (vars (b-s b-k b-d b-bio bundle-data) (resp query-response)
    (r-s r-s2 r-k r-d t t2 authcode random256)
    (c-id k-id d-id m-root i-root b-id name)
    (keyserver-ch database-ch chan) (seq blind exempt k rndx))
  (defstrand synth-client-exempt 13 (b-s b-s) (b-k b-k) (b-d b-d)
    (b-bio b-bio) (resp resp) (r-s r-s) (r-s2 r-s2) (r-k r-k) (r-d r-d)
    (t t) (t2 t2) (authcode authcode) (c-id c-id) (k-id k-id)
    (d-id d-id) (m-root m-root) (i-root i-root) (b-id b-id)
    (keyserver-ch keyserver-ch) (database-ch database-ch) (seq seq)
    (exempt exempt) (blind blind) (k k))
  (deflistener seq)
  (non-orig (privk c-id) (privk k-id) (privk d-id) (privk m-root)
    (privk i-root) (privk b-id))
  (pen-non-orig authcode)
  (uniq-orig r-s r-s2)
  (uniq-gen seq blind exempt)
  (absent (exempt (mul seq blind)))
  (conf keyserver-ch database-ch)
  (auth keyserver-ch database-ch)
  (facts (neq seq blind exempt))
  (traces
    ((send keyserver-ch
       (cat r-s "keyserver" k-id
         (cat "Token" c-id (pubk c-id) m-root (pubk m-root) b-s)
         (enc (hash c-id (pubk c-id) m-root (pubk m-root) b-s)
           (privk m-root))))
      (recv keyserver-ch
        (cat t r-k
          (cat (cat "Token" k-id (pubk k-id) i-root (pubk i-root) b-k)
            (enc (hash k-id (pubk k-id) i-root (pubk i-root) b-k)
              (privk i-root)))
          (enc
            (hash "server-mutauth" r-k r-s
              (cat "Token" k-id (pubk k-id) i-root (pubk i-root) b-k)
              (enc (hash k-id (pubk k-id) i-root (pubk i-root) b-k)
                (privk i-root))) (privk k-id))))
      (send keyserver-ch
        (cat t "nSeq"
          (enc
            (hash "client-mutauth" r-k r-s
              (cat "Token" c-id (pubk c-id) m-root (pubk m-root) b-s)
              (enc (hash c-id (pubk c-id) m-root (pubk m-root) b-s)
                (privk m-root))) (privk c-id))))
      (send keyserver-ch (cat t (exp (gen) (mul seq blind))))
      (send keyserver-ch (cat t (exp (gen) (mul blind exempt))))
      (recv keyserver-ch (exp (gen) (mul seq blind k)))
      (recv keyserver-ch (exp (gen) (mul blind exempt k)))
      (send database-ch
        (cat r-s2 "screen"
          (cat "Token" c-id (pubk c-id) m-root (pubk m-root) b-s)
          (enc (hash c-id (pubk c-id) m-root (pubk m-root) b-s)
            (privk m-root))))
      (recv database-ch
        (cat t2 r-d
          (cat (cat "Token" d-id (pubk d-id) i-root (pubk i-root) b-d)
            (enc (hash d-id (pubk d-id) i-root (pubk i-root) b-d)
              (privk i-root)))
          (enc
            (hash "server-mutauth" r-d r-s2
              (cat "Token" d-id (pubk d-id) i-root (pubk i-root) b-d)
              (enc (hash d-id (pubk d-id) i-root (pubk i-root) b-d)
                (privk i-root))) (privk d-id))))
      (send database-ch
        (cat t2 "nSeq"
          (enc
            (hash "client-mutauth" r-d r-s2
              (cat "Token" c-id (pubk c-id) m-root (pubk m-root) b-s)
              (enc (hash c-id (pubk c-id) m-root (pubk m-root) b-s)
                (privk m-root))) (privk c-id))))
      (send database-ch (cat t2 (exp (gen) (mul seq k))))
      (send database-ch
        (cat
          (cat (cat "Token" c-id (pubk c-id) b-id (pubk b-id) b-bio)
            (enc (hash c-id (pubk c-id) b-id (pubk b-id) b-bio)
              (privk b-id))) authcode (exp (gen) (mul exempt k))))
      (recv database-ch resp)) ((recv seq) (send seq)))
  (label 0)
  (unrealized (0 1) (0 5) (0 6) (0 8) (0 12) (1 0))
  (preskeleton)
  (origs (r-s (0 0)) (r-s2 (0 7)))
  (ugens (seq (0 3)) (exempt (0 4)) (blind (0 3)))
  (comment "Not a skeleton"))

(comment "Nothing left to do")
